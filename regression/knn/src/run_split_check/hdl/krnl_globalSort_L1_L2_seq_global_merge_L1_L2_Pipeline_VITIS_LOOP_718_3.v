// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module krnl_globalSort_L1_L2_seq_global_merge_L1_L2_Pipeline_VITIS_LOOP_718_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        idx,
        idx_1,
        idx_2,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        p_read11,
        p_read12,
        p_read13,
        p_read14,
        p_read15,
        p_read16,
        p_read17,
        p_read18,
        p_read19,
        p_read20,
        p_read21,
        p_read22,
        p_read23,
        p_read24,
        p_read25,
        p_read26,
        p_read27,
        p_read28,
        p_read29,
        min_idx_out,
        min_idx_out_ap_vld,
        min_value_out,
        min_value_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] idx;
input  [31:0] idx_1;
input  [31:0] idx_2;
input  [31:0] p_read;
input  [31:0] p_read1;
input  [31:0] p_read2;
input  [31:0] p_read3;
input  [31:0] p_read4;
input  [31:0] p_read5;
input  [31:0] p_read6;
input  [31:0] p_read7;
input  [31:0] p_read8;
input  [31:0] p_read9;
input  [31:0] p_read10;
input  [31:0] p_read11;
input  [31:0] p_read12;
input  [31:0] p_read13;
input  [31:0] p_read14;
input  [31:0] p_read15;
input  [31:0] p_read16;
input  [31:0] p_read17;
input  [31:0] p_read18;
input  [31:0] p_read19;
input  [31:0] p_read20;
input  [31:0] p_read21;
input  [31:0] p_read22;
input  [31:0] p_read23;
input  [31:0] p_read24;
input  [31:0] p_read25;
input  [31:0] p_read26;
input  [31:0] p_read27;
input  [31:0] p_read28;
input  [31:0] p_read29;
output  [31:0] min_idx_out;
output   min_idx_out_ap_vld;
output  [31:0] min_value_out;
output   min_value_out_ap_vld;

reg ap_idle;
reg min_idx_out_ap_vld;
reg min_value_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln718_fu_366_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [1:0] j_reg_629;
reg   [1:0] j_reg_629_pp0_iter1_reg;
reg   [0:0] icmp_ln718_reg_634;
wire   [31:0] min_value_1_fu_468_p5;
reg   [31:0] min_value_1_reg_638;
reg   [31:0] min_value_1_reg_638_pp0_iter1_reg;
reg   [31:0] min_value_load_1_reg_645;
wire   [0:0] icmp_ln721_fu_524_p2;
reg   [0:0] icmp_ln721_reg_651;
wire   [0:0] icmp_ln721_1_fu_530_p2;
reg   [0:0] icmp_ln721_1_reg_656;
wire   [0:0] icmp_ln721_2_fu_536_p2;
reg   [0:0] icmp_ln721_2_reg_661;
wire   [0:0] icmp_ln721_3_fu_542_p2;
reg   [0:0] icmp_ln721_3_reg_666;
reg   [31:0] min_value_fu_120;
wire   [31:0] min_value_2_fu_571_p3;
reg   [31:0] ap_sig_allocacmp_min_value_load_1;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg   [31:0] min_idx_fu_124;
wire   [31:0] min_idx_4_fu_580_p3;
reg   [1:0] min_idx_1_fu_128;
wire   [1:0] add_ln718_fu_372_p2;
reg   [1:0] ap_sig_allocacmp_j;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] tmp_5_fu_378_p5;
wire   [31:0] tmp_6_fu_390_p12;
wire   [31:0] tmp_7_fu_416_p12;
wire   [31:0] tmp_8_fu_442_p12;
wire   [31:0] bitcast_ln721_fu_489_p1;
wire   [31:0] bitcast_ln721_1_fu_506_p1;
wire   [7:0] tmp_4_fu_492_p4;
wire   [22:0] trunc_ln721_fu_502_p1;
wire   [7:0] tmp_9_fu_510_p4;
wire   [22:0] trunc_ln721_1_fu_520_p1;
wire   [0:0] grp_fu_344_p2;
wire   [0:0] or_ln721_fu_551_p2;
wire   [0:0] and_ln721_fu_559_p2;
wire   [0:0] or_ln721_1_fu_555_p2;
wire   [0:0] and_ln721_1_fu_565_p2;
wire   [31:0] zext_ln721_fu_577_p1;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

krnl_globalSort_L1_L2_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U67(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(min_value_1_reg_638),
    .din1(ap_sig_allocacmp_min_value_load_1),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_344_p2)
);

krnl_globalSort_L1_L2_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U68(
    .din0(idx),
    .din1(idx_1),
    .din2(idx_2),
    .din3(ap_sig_allocacmp_j),
    .dout(tmp_5_fu_378_p5)
);

krnl_globalSort_L1_L2_mux_1032_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mux_1032_32_1_1_U69(
    .din0(p_read),
    .din1(p_read1),
    .din2(p_read2),
    .din3(p_read3),
    .din4(p_read4),
    .din5(p_read5),
    .din6(p_read6),
    .din7(p_read7),
    .din8(p_read8),
    .din9(p_read9),
    .din10(tmp_5_fu_378_p5),
    .dout(tmp_6_fu_390_p12)
);

krnl_globalSort_L1_L2_mux_1032_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mux_1032_32_1_1_U70(
    .din0(p_read10),
    .din1(p_read11),
    .din2(p_read12),
    .din3(p_read13),
    .din4(p_read14),
    .din5(p_read15),
    .din6(p_read16),
    .din7(p_read17),
    .din8(p_read18),
    .din9(p_read19),
    .din10(tmp_5_fu_378_p5),
    .dout(tmp_7_fu_416_p12)
);

krnl_globalSort_L1_L2_mux_1032_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mux_1032_32_1_1_U71(
    .din0(p_read20),
    .din1(p_read21),
    .din2(p_read22),
    .din3(p_read23),
    .din4(p_read24),
    .din5(p_read25),
    .din6(p_read26),
    .din7(p_read27),
    .din8(p_read28),
    .din9(p_read29),
    .din10(tmp_5_fu_378_p5),
    .dout(tmp_8_fu_442_p12)
);

krnl_globalSort_L1_L2_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U72(
    .din0(tmp_6_fu_390_p12),
    .din1(tmp_7_fu_416_p12),
    .din2(tmp_8_fu_442_p12),
    .din3(ap_sig_allocacmp_j),
    .dout(min_value_1_fu_468_p5)
);

krnl_globalSort_L1_L2_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln718_fu_366_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            min_idx_1_fu_128 <= add_ln718_fu_372_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            min_idx_1_fu_128 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            min_idx_fu_124 <= 32'd4294967295;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            min_idx_fu_124 <= min_idx_4_fu_580_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            min_value_fu_120 <= 32'd2139095037;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            min_value_fu_120 <= min_value_2_fu_571_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln718_reg_634 <= icmp_ln718_fu_366_p2;
        icmp_ln721_1_reg_656 <= icmp_ln721_1_fu_530_p2;
        icmp_ln721_2_reg_661 <= icmp_ln721_2_fu_536_p2;
        icmp_ln721_3_reg_666 <= icmp_ln721_3_fu_542_p2;
        icmp_ln721_reg_651 <= icmp_ln721_fu_524_p2;
        j_reg_629 <= ap_sig_allocacmp_j;
        j_reg_629_pp0_iter1_reg <= j_reg_629;
        min_value_1_reg_638_pp0_iter1_reg <= min_value_1_reg_638;
        min_value_load_1_reg_645 <= ap_sig_allocacmp_min_value_load_1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln718_fu_366_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        min_value_1_reg_638 <= min_value_1_fu_468_p5;
    end
end

always @ (*) begin
    if (((icmp_ln718_fu_366_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j = 2'd0;
    end else begin
        ap_sig_allocacmp_j = min_idx_1_fu_128;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_min_value_load_1 = min_value_2_fu_571_p3;
    end else begin
        ap_sig_allocacmp_min_value_load_1 = min_value_fu_120;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln718_reg_634 == 1'd1))) begin
        min_idx_out_ap_vld = 1'b1;
    end else begin
        min_idx_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln718_reg_634 == 1'd1))) begin
        min_value_out_ap_vld = 1'b1;
    end else begin
        min_value_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln718_fu_372_p2 = (ap_sig_allocacmp_j + 2'd1);

assign and_ln721_1_fu_565_p2 = (or_ln721_1_fu_555_p2 & and_ln721_fu_559_p2);

assign and_ln721_fu_559_p2 = (or_ln721_fu_551_p2 & grp_fu_344_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln721_1_fu_506_p1 = ap_sig_allocacmp_min_value_load_1;

assign bitcast_ln721_fu_489_p1 = min_value_1_reg_638;

assign icmp_ln718_fu_366_p2 = ((ap_sig_allocacmp_j == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln721_1_fu_530_p2 = ((trunc_ln721_fu_502_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln721_2_fu_536_p2 = ((tmp_9_fu_510_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln721_3_fu_542_p2 = ((trunc_ln721_1_fu_520_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln721_fu_524_p2 = ((tmp_4_fu_492_p4 != 8'd255) ? 1'b1 : 1'b0);

assign min_idx_4_fu_580_p3 = ((and_ln721_1_fu_565_p2[0:0] == 1'b1) ? zext_ln721_fu_577_p1 : min_idx_fu_124);

assign min_idx_out = min_idx_fu_124;

assign min_value_2_fu_571_p3 = ((and_ln721_1_fu_565_p2[0:0] == 1'b1) ? min_value_1_reg_638_pp0_iter1_reg : min_value_load_1_reg_645);

assign min_value_out = min_value_fu_120;

assign or_ln721_1_fu_555_p2 = (icmp_ln721_3_reg_666 | icmp_ln721_2_reg_661);

assign or_ln721_fu_551_p2 = (icmp_ln721_reg_651 | icmp_ln721_1_reg_656);

assign tmp_4_fu_492_p4 = {{bitcast_ln721_fu_489_p1[30:23]}};

assign tmp_9_fu_510_p4 = {{bitcast_ln721_1_fu_506_p1[30:23]}};

assign trunc_ln721_1_fu_520_p1 = bitcast_ln721_1_fu_506_p1[22:0];

assign trunc_ln721_fu_502_p1 = bitcast_ln721_fu_489_p1[22:0];

assign zext_ln721_fu_577_p1 = j_reg_629_pp0_iter1_reg;

endmodule //krnl_globalSort_L1_L2_seq_global_merge_L1_L2_Pipeline_VITIS_LOOP_718_3
