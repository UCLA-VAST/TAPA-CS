// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module krnl_globalSort_L3_seq_global_merge_L3_Pipeline_VITIS_LOOP_760_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        idx,
        idx_1,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        p_read11,
        p_read12,
        p_read13,
        p_read14,
        p_read15,
        p_read16,
        p_read17,
        p_read18,
        p_read19,
        min_idx_out,
        min_idx_out_ap_vld,
        min_value_out,
        min_value_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] idx;
input  [31:0] idx_1;
input  [31:0] p_read;
input  [31:0] p_read1;
input  [31:0] p_read2;
input  [31:0] p_read3;
input  [31:0] p_read4;
input  [31:0] p_read5;
input  [31:0] p_read6;
input  [31:0] p_read7;
input  [31:0] p_read8;
input  [31:0] p_read9;
input  [31:0] p_read10;
input  [31:0] p_read11;
input  [31:0] p_read12;
input  [31:0] p_read13;
input  [31:0] p_read14;
input  [31:0] p_read15;
input  [31:0] p_read16;
input  [31:0] p_read17;
input  [31:0] p_read18;
input  [31:0] p_read19;
output  [31:0] min_idx_out;
output   min_idx_out_ap_vld;
output  [31:0] min_value_out;
output   min_value_out_ap_vld;

reg ap_idle;
reg min_idx_out_ap_vld;
reg min_value_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln760_fu_278_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln760_reg_515;
wire   [31:0] min_value_1_fu_352_p4;
reg   [31:0] min_value_1_reg_519;
reg   [31:0] min_value_1_reg_519_pp0_iter1_reg;
wire   [0:0] trunc_ln763_2_fu_362_p1;
reg   [0:0] trunc_ln763_2_reg_526;
reg   [0:0] trunc_ln763_2_reg_526_pp0_iter1_reg;
reg   [31:0] min_value_load_1_reg_531;
wire   [0:0] icmp_ln763_fu_410_p2;
reg   [0:0] icmp_ln763_reg_537;
wire   [0:0] icmp_ln763_1_fu_416_p2;
reg   [0:0] icmp_ln763_1_reg_542;
wire   [0:0] icmp_ln763_2_fu_422_p2;
reg   [0:0] icmp_ln763_2_reg_547;
wire   [0:0] icmp_ln763_3_fu_428_p2;
reg   [0:0] icmp_ln763_3_reg_552;
reg   [31:0] min_value_fu_98;
wire   [31:0] min_value_2_fu_457_p3;
reg   [31:0] ap_sig_allocacmp_min_value_load_1;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg   [31:0] min_idx_fu_102;
wire   [31:0] min_idx_4_fu_466_p3;
reg   [1:0] min_idx_1_fu_106;
wire   [1:0] add_ln760_fu_284_p2;
reg   [1:0] ap_sig_allocacmp_j;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] tmp_4_fu_290_p4;
wire   [31:0] tmp_5_fu_300_p12;
wire   [31:0] tmp_6_fu_326_p12;
wire   [31:0] bitcast_ln763_fu_375_p1;
wire   [31:0] bitcast_ln763_1_fu_392_p1;
wire   [7:0] tmp_3_fu_378_p4;
wire   [22:0] trunc_ln763_fu_388_p1;
wire   [7:0] tmp_7_fu_396_p4;
wire   [22:0] trunc_ln763_1_fu_406_p1;
wire   [0:0] grp_fu_256_p2;
wire   [0:0] or_ln763_fu_437_p2;
wire   [0:0] and_ln763_fu_445_p2;
wire   [0:0] or_ln763_1_fu_441_p2;
wire   [0:0] and_ln763_1_fu_451_p2;
wire   [31:0] zext_ln763_fu_463_p1;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

krnl_globalSort_L3_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U45(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(min_value_1_reg_519),
    .din1(ap_sig_allocacmp_min_value_load_1),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_256_p2)
);

krnl_globalSort_L3_mux_22_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_22_32_1_1_U46(
    .din0(idx),
    .din1(idx_1),
    .din2(ap_sig_allocacmp_j),
    .dout(tmp_4_fu_290_p4)
);

krnl_globalSort_L3_mux_1032_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mux_1032_32_1_1_U47(
    .din0(p_read),
    .din1(p_read1),
    .din2(p_read2),
    .din3(p_read3),
    .din4(p_read4),
    .din5(p_read5),
    .din6(p_read6),
    .din7(p_read7),
    .din8(p_read8),
    .din9(p_read9),
    .din10(tmp_4_fu_290_p4),
    .dout(tmp_5_fu_300_p12)
);

krnl_globalSort_L3_mux_1032_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mux_1032_32_1_1_U48(
    .din0(p_read10),
    .din1(p_read11),
    .din2(p_read12),
    .din3(p_read13),
    .din4(p_read14),
    .din5(p_read15),
    .din6(p_read16),
    .din7(p_read17),
    .din8(p_read18),
    .din9(p_read19),
    .din10(tmp_4_fu_290_p4),
    .dout(tmp_6_fu_326_p12)
);

krnl_globalSort_L3_mux_22_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_22_32_1_1_U49(
    .din0(tmp_5_fu_300_p12),
    .din1(tmp_6_fu_326_p12),
    .din2(ap_sig_allocacmp_j),
    .dout(min_value_1_fu_352_p4)
);

krnl_globalSort_L3_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln760_fu_278_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            min_idx_1_fu_106 <= add_ln760_fu_284_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            min_idx_1_fu_106 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            min_idx_fu_102 <= 32'd4294967295;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            min_idx_fu_102 <= min_idx_4_fu_466_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            min_value_fu_98 <= 32'd2139095037;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            min_value_fu_98 <= min_value_2_fu_457_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln760_reg_515 <= icmp_ln760_fu_278_p2;
        icmp_ln763_1_reg_542 <= icmp_ln763_1_fu_416_p2;
        icmp_ln763_2_reg_547 <= icmp_ln763_2_fu_422_p2;
        icmp_ln763_3_reg_552 <= icmp_ln763_3_fu_428_p2;
        icmp_ln763_reg_537 <= icmp_ln763_fu_410_p2;
        min_value_1_reg_519_pp0_iter1_reg <= min_value_1_reg_519;
        min_value_load_1_reg_531 <= ap_sig_allocacmp_min_value_load_1;
        trunc_ln763_2_reg_526_pp0_iter1_reg <= trunc_ln763_2_reg_526;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln760_fu_278_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        min_value_1_reg_519 <= min_value_1_fu_352_p4;
        trunc_ln763_2_reg_526 <= trunc_ln763_2_fu_362_p1;
    end
end

always @ (*) begin
    if (((icmp_ln760_fu_278_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j = 2'd0;
    end else begin
        ap_sig_allocacmp_j = min_idx_1_fu_106;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_min_value_load_1 = min_value_2_fu_457_p3;
    end else begin
        ap_sig_allocacmp_min_value_load_1 = min_value_fu_98;
    end
end

always @ (*) begin
    if (((icmp_ln760_reg_515 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        min_idx_out_ap_vld = 1'b1;
    end else begin
        min_idx_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln760_reg_515 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        min_value_out_ap_vld = 1'b1;
    end else begin
        min_value_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln760_fu_284_p2 = (ap_sig_allocacmp_j + 2'd1);

assign and_ln763_1_fu_451_p2 = (or_ln763_1_fu_441_p2 & and_ln763_fu_445_p2);

assign and_ln763_fu_445_p2 = (or_ln763_fu_437_p2 & grp_fu_256_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln763_1_fu_392_p1 = ap_sig_allocacmp_min_value_load_1;

assign bitcast_ln763_fu_375_p1 = min_value_1_reg_519;

assign icmp_ln760_fu_278_p2 = ((ap_sig_allocacmp_j == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln763_1_fu_416_p2 = ((trunc_ln763_fu_388_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln763_2_fu_422_p2 = ((tmp_7_fu_396_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln763_3_fu_428_p2 = ((trunc_ln763_1_fu_406_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln763_fu_410_p2 = ((tmp_3_fu_378_p4 != 8'd255) ? 1'b1 : 1'b0);

assign min_idx_4_fu_466_p3 = ((and_ln763_1_fu_451_p2[0:0] == 1'b1) ? zext_ln763_fu_463_p1 : min_idx_fu_102);

assign min_idx_out = min_idx_fu_102;

assign min_value_2_fu_457_p3 = ((and_ln763_1_fu_451_p2[0:0] == 1'b1) ? min_value_1_reg_519_pp0_iter1_reg : min_value_load_1_reg_531);

assign min_value_out = min_value_fu_98;

assign or_ln763_1_fu_441_p2 = (icmp_ln763_3_reg_552 | icmp_ln763_2_reg_547);

assign or_ln763_fu_437_p2 = (icmp_ln763_reg_537 | icmp_ln763_1_reg_542);

assign tmp_3_fu_378_p4 = {{bitcast_ln763_fu_375_p1[30:23]}};

assign tmp_7_fu_396_p4 = {{bitcast_ln763_1_fu_392_p1[30:23]}};

assign trunc_ln763_1_fu_406_p1 = bitcast_ln763_1_fu_392_p1[22:0];

assign trunc_ln763_2_fu_362_p1 = ap_sig_allocacmp_j[0:0];

assign trunc_ln763_fu_388_p1 = bitcast_ln763_fu_375_p1[22:0];

assign zext_ln763_fu_463_p1 = trunc_ln763_2_reg_526_pp0_iter1_reg;

endmodule //krnl_globalSort_L3_seq_global_merge_L3_Pipeline_VITIS_LOOP_760_3
