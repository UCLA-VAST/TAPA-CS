// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module krnl_partialKnn_wrapper_13_merge_dual_all_PEs (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        local_kNearstDist_partial_a_address0,
        local_kNearstDist_partial_a_ce0,
        local_kNearstDist_partial_a_q0,
        local_kNearstDist_partial_b_address0,
        local_kNearstDist_partial_b_ce0,
        local_kNearstDist_partial_b_q0,
        local_kNearstId_partial_a_address0,
        local_kNearstId_partial_a_ce0,
        local_kNearstId_partial_a_q0,
        local_kNearstId_partial_b_address0,
        local_kNearstId_partial_b_ce0,
        local_kNearstId_partial_b_q0,
        dist_address0,
        dist_ce0,
        dist_we0,
        dist_d0,
        id_address0,
        id_ce0,
        id_we0,
        id_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] local_kNearstDist_partial_a_address0;
output   local_kNearstDist_partial_a_ce0;
input  [31:0] local_kNearstDist_partial_a_q0;
output  [3:0] local_kNearstDist_partial_b_address0;
output   local_kNearstDist_partial_b_ce0;
input  [31:0] local_kNearstDist_partial_b_q0;
output  [3:0] local_kNearstId_partial_a_address0;
output   local_kNearstId_partial_a_ce0;
input  [31:0] local_kNearstId_partial_a_q0;
output  [3:0] local_kNearstId_partial_b_address0;
output   local_kNearstId_partial_b_ce0;
input  [31:0] local_kNearstId_partial_b_q0;
output  [3:0] dist_address0;
output   dist_ce0;
output   dist_we0;
output  [31:0] dist_d0;
output  [3:0] id_address0;
output   id_ce0;
output   id_we0;
output  [31:0] id_d0;

reg ap_idle;
reg local_kNearstDist_partial_a_ce0;
reg local_kNearstDist_partial_b_ce0;
reg local_kNearstId_partial_a_ce0;
reg local_kNearstId_partial_b_ce0;
reg dist_ce0;
reg dist_we0;
reg[31:0] dist_d0;
reg id_ce0;
reg id_we0;
reg[31:0] id_d0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_subdone;
wire   [0:0] tmp_3_fu_176_p3;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [4:0] i_2_reg_339;
wire    ap_block_pp0_stage1_11001;
reg   [4:0] i_2_reg_339_pp0_iter1_reg;
reg   [0:0] tmp_3_reg_344;
reg   [31:0] idx_a_load_reg_348;
reg   [31:0] idx_b_load_reg_353;
wire   [63:0] zext_ln321_fu_190_p1;
reg   [63:0] zext_ln321_reg_358;
wire   [63:0] zext_ln321_1_fu_195_p1;
reg   [63:0] zext_ln321_1_reg_368;
reg   [31:0] local_kNearstDist_partial_a_load_reg_378;
reg   [31:0] local_kNearstDist_partial_b_load_reg_385;
wire   [0:0] and_ln321_1_fu_287_p2;
reg   [0:0] and_ln321_1_reg_392;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage1;
wire   [63:0] i_cast_fu_313_p1;
wire    ap_block_pp0_stage0;
reg   [4:0] i_fu_60;
wire   [4:0] add_ln319_fu_200_p2;
wire    ap_loop_init;
reg   [31:0] idx_a_fu_64;
wire   [31:0] idx_a_1_fu_303_p2;
reg   [31:0] ap_sig_allocacmp_idx_a_load;
reg   [31:0] idx_b_fu_68;
wire   [31:0] idx_b_1_fu_293_p2;
reg   [31:0] ap_sig_allocacmp_idx_b_load;
wire   [31:0] bitcast_ln321_fu_211_p1;
wire   [31:0] bitcast_ln321_1_fu_228_p1;
wire   [7:0] tmp_fu_214_p4;
wire   [22:0] trunc_ln321_fu_224_p1;
wire   [0:0] icmp_ln321_1_fu_251_p2;
wire   [0:0] icmp_ln321_fu_245_p2;
wire   [7:0] tmp_1_fu_231_p4;
wire   [22:0] trunc_ln321_1_fu_241_p1;
wire   [0:0] icmp_ln321_3_fu_269_p2;
wire   [0:0] icmp_ln321_2_fu_263_p2;
wire   [0:0] or_ln321_fu_257_p2;
wire   [0:0] or_ln321_1_fu_275_p2;
wire   [0:0] and_ln321_fu_281_p2;
wire   [0:0] grp_fu_152_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter1_stage0;
reg    ap_idle_pp0_0to0;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to2;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_162;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

krnl_partialKnn_wrapper_13_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U601(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(local_kNearstDist_partial_a_q0),
    .din1(local_kNearstDist_partial_b_q0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_152_p2)
);

krnl_partialKnn_wrapper_13_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        i_fu_60 <= 5'd10;
    end else if (((tmp_3_fu_176_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_fu_60 <= add_ln319_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        idx_a_fu_64 <= 32'd10;
    end else if (((1'd1 == and_ln321_1_fu_287_p2) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        idx_a_fu_64 <= idx_a_1_fu_303_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        idx_b_fu_68 <= 32'd10;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd0 == and_ln321_1_fu_287_p2))) begin
        idx_b_fu_68 <= idx_b_1_fu_293_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        and_ln321_1_reg_392 <= and_ln321_1_fu_287_p2;
        i_2_reg_339 <= i_fu_60;
        i_2_reg_339_pp0_iter1_reg <= i_2_reg_339;
        tmp_3_reg_344 <= i_fu_60[32'd4];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_fu_176_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        idx_a_load_reg_348 <= ap_sig_allocacmp_idx_a_load;
        idx_b_load_reg_353 <= ap_sig_allocacmp_idx_b_load;
        zext_ln321_1_reg_368[31 : 0] <= zext_ln321_1_fu_195_p1[31 : 0];
        zext_ln321_reg_358[31 : 0] <= zext_ln321_fu_190_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_3_reg_344 == 1'd0))) begin
        local_kNearstDist_partial_a_load_reg_378 <= local_kNearstDist_partial_a_q0;
        local_kNearstDist_partial_b_load_reg_385 <= local_kNearstDist_partial_b_q0;
    end
end

always @ (*) begin
    if (((tmp_3_fu_176_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_3_reg_344 == 1'd1))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln321_1_fu_287_p2) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_sig_allocacmp_idx_a_load = idx_a_1_fu_303_p2;
    end else begin
        ap_sig_allocacmp_idx_a_load = idx_a_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd0 == and_ln321_1_fu_287_p2))) begin
        ap_sig_allocacmp_idx_b_load = idx_b_1_fu_293_p2;
    end else begin
        ap_sig_allocacmp_idx_b_load = idx_b_fu_68;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd0 == and_ln321_1_reg_392)) | ((1'd1 == and_ln321_1_reg_392) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        dist_ce0 = 1'b1;
    end else begin
        dist_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_162)) begin
        if ((1'd1 == and_ln321_1_reg_392)) begin
            dist_d0 = local_kNearstDist_partial_a_load_reg_378;
        end else if ((1'd0 == and_ln321_1_reg_392)) begin
            dist_d0 = local_kNearstDist_partial_b_load_reg_385;
        end else begin
            dist_d0 = 'bx;
        end
    end else begin
        dist_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd0 == and_ln321_1_reg_392)) | ((1'd1 == and_ln321_1_reg_392) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        dist_we0 = 1'b1;
    end else begin
        dist_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd0 == and_ln321_1_reg_392)) | ((1'd1 == and_ln321_1_reg_392) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        id_ce0 = 1'b1;
    end else begin
        id_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_162)) begin
        if ((1'd1 == and_ln321_1_reg_392)) begin
            id_d0 = local_kNearstId_partial_a_q0;
        end else if ((1'd0 == and_ln321_1_reg_392)) begin
            id_d0 = local_kNearstId_partial_b_q0;
        end else begin
            id_d0 = 'bx;
        end
    end else begin
        id_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd0 == and_ln321_1_reg_392)) | ((1'd1 == and_ln321_1_reg_392) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        id_we0 = 1'b1;
    end else begin
        id_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        local_kNearstDist_partial_a_ce0 = 1'b1;
    end else begin
        local_kNearstDist_partial_a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        local_kNearstDist_partial_b_ce0 = 1'b1;
    end else begin
        local_kNearstDist_partial_b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        local_kNearstId_partial_a_ce0 = 1'b1;
    end else begin
        local_kNearstId_partial_a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        local_kNearstId_partial_b_ce0 = 1'b1;
    end else begin
        local_kNearstId_partial_b_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln319_fu_200_p2 = ($signed(i_fu_60) + $signed(5'd31));

assign and_ln321_1_fu_287_p2 = (grp_fu_152_p2 & and_ln321_fu_281_p2);

assign and_ln321_fu_281_p2 = (or_ln321_fu_257_p2 & or_ln321_1_fu_275_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_162 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign bitcast_ln321_1_fu_228_p1 = local_kNearstDist_partial_b_load_reg_385;

assign bitcast_ln321_fu_211_p1 = local_kNearstDist_partial_a_load_reg_378;

assign dist_address0 = i_cast_fu_313_p1;

assign i_cast_fu_313_p1 = i_2_reg_339_pp0_iter1_reg;

assign icmp_ln321_1_fu_251_p2 = ((trunc_ln321_fu_224_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln321_2_fu_263_p2 = ((tmp_1_fu_231_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln321_3_fu_269_p2 = ((trunc_ln321_1_fu_241_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln321_fu_245_p2 = ((tmp_fu_214_p4 != 8'd255) ? 1'b1 : 1'b0);

assign id_address0 = i_cast_fu_313_p1;

assign idx_a_1_fu_303_p2 = ($signed(idx_a_load_reg_348) + $signed(32'd4294967295));

assign idx_b_1_fu_293_p2 = ($signed(idx_b_load_reg_353) + $signed(32'd4294967295));

assign local_kNearstDist_partial_a_address0 = zext_ln321_fu_190_p1;

assign local_kNearstDist_partial_b_address0 = zext_ln321_1_fu_195_p1;

assign local_kNearstId_partial_a_address0 = zext_ln321_reg_358;

assign local_kNearstId_partial_b_address0 = zext_ln321_1_reg_368;

assign or_ln321_1_fu_275_p2 = (icmp_ln321_3_fu_269_p2 | icmp_ln321_2_fu_263_p2);

assign or_ln321_fu_257_p2 = (icmp_ln321_fu_245_p2 | icmp_ln321_1_fu_251_p2);

assign tmp_1_fu_231_p4 = {{bitcast_ln321_1_fu_228_p1[30:23]}};

assign tmp_3_fu_176_p3 = i_fu_60[32'd4];

assign tmp_fu_214_p4 = {{bitcast_ln321_fu_211_p1[30:23]}};

assign trunc_ln321_1_fu_241_p1 = bitcast_ln321_1_fu_228_p1[22:0];

assign trunc_ln321_fu_224_p1 = bitcast_ln321_fu_211_p1[22:0];

assign zext_ln321_1_fu_195_p1 = ap_sig_allocacmp_idx_b_load;

assign zext_ln321_fu_190_p1 = ap_sig_allocacmp_idx_a_load;

always @ (posedge ap_clk) begin
    zext_ln321_reg_358[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln321_1_reg_368[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //krnl_partialKnn_wrapper_13_merge_dual_all_PEs
