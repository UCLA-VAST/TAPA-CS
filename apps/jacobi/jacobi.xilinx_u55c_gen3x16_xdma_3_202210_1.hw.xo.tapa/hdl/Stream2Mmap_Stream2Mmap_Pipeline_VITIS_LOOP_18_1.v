// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Stream2Mmap_Stream2Mmap_Pipeline_VITIS_LOOP_18_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_mmap_AWVALID,
        m_axi_mmap_AWREADY,
        m_axi_mmap_AWADDR,
        m_axi_mmap_AWID,
        m_axi_mmap_AWLEN,
        m_axi_mmap_AWSIZE,
        m_axi_mmap_AWBURST,
        m_axi_mmap_AWLOCK,
        m_axi_mmap_AWCACHE,
        m_axi_mmap_AWPROT,
        m_axi_mmap_AWQOS,
        m_axi_mmap_AWREGION,
        m_axi_mmap_AWUSER,
        m_axi_mmap_WVALID,
        m_axi_mmap_WREADY,
        m_axi_mmap_WDATA,
        m_axi_mmap_WSTRB,
        m_axi_mmap_WLAST,
        m_axi_mmap_WID,
        m_axi_mmap_WUSER,
        m_axi_mmap_ARVALID,
        m_axi_mmap_ARREADY,
        m_axi_mmap_ARADDR,
        m_axi_mmap_ARID,
        m_axi_mmap_ARLEN,
        m_axi_mmap_ARSIZE,
        m_axi_mmap_ARBURST,
        m_axi_mmap_ARLOCK,
        m_axi_mmap_ARCACHE,
        m_axi_mmap_ARPROT,
        m_axi_mmap_ARQOS,
        m_axi_mmap_ARREGION,
        m_axi_mmap_ARUSER,
        m_axi_mmap_RVALID,
        m_axi_mmap_RREADY,
        m_axi_mmap_RDATA,
        m_axi_mmap_RLAST,
        m_axi_mmap_RID,
        m_axi_mmap_RFIFONUM,
        m_axi_mmap_RUSER,
        m_axi_mmap_RRESP,
        m_axi_mmap_BVALID,
        m_axi_mmap_BREADY,
        m_axi_mmap_BRESP,
        m_axi_mmap_BID,
        m_axi_mmap_BUSER,
        stream_s_dout,
        stream_s_empty_n,
        stream_s_read,
        stream_peek_dout,
        stream_peek_empty_n,
        stream_peek_read,
        mmap_offset
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_mmap_AWVALID;
input   m_axi_mmap_AWREADY;
output  [63:0] m_axi_mmap_AWADDR;
output  [0:0] m_axi_mmap_AWID;
output  [31:0] m_axi_mmap_AWLEN;
output  [2:0] m_axi_mmap_AWSIZE;
output  [1:0] m_axi_mmap_AWBURST;
output  [1:0] m_axi_mmap_AWLOCK;
output  [3:0] m_axi_mmap_AWCACHE;
output  [2:0] m_axi_mmap_AWPROT;
output  [3:0] m_axi_mmap_AWQOS;
output  [3:0] m_axi_mmap_AWREGION;
output  [0:0] m_axi_mmap_AWUSER;
output   m_axi_mmap_WVALID;
input   m_axi_mmap_WREADY;
output  [31:0] m_axi_mmap_WDATA;
output  [3:0] m_axi_mmap_WSTRB;
output   m_axi_mmap_WLAST;
output  [0:0] m_axi_mmap_WID;
output  [0:0] m_axi_mmap_WUSER;
output   m_axi_mmap_ARVALID;
input   m_axi_mmap_ARREADY;
output  [63:0] m_axi_mmap_ARADDR;
output  [0:0] m_axi_mmap_ARID;
output  [31:0] m_axi_mmap_ARLEN;
output  [2:0] m_axi_mmap_ARSIZE;
output  [1:0] m_axi_mmap_ARBURST;
output  [1:0] m_axi_mmap_ARLOCK;
output  [3:0] m_axi_mmap_ARCACHE;
output  [2:0] m_axi_mmap_ARPROT;
output  [3:0] m_axi_mmap_ARQOS;
output  [3:0] m_axi_mmap_ARREGION;
output  [0:0] m_axi_mmap_ARUSER;
input   m_axi_mmap_RVALID;
output   m_axi_mmap_RREADY;
input  [31:0] m_axi_mmap_RDATA;
input   m_axi_mmap_RLAST;
input  [0:0] m_axi_mmap_RID;
input  [8:0] m_axi_mmap_RFIFONUM;
input  [0:0] m_axi_mmap_RUSER;
input  [1:0] m_axi_mmap_RRESP;
input   m_axi_mmap_BVALID;
output   m_axi_mmap_BREADY;
input  [1:0] m_axi_mmap_BRESP;
input  [0:0] m_axi_mmap_BID;
input  [0:0] m_axi_mmap_BUSER;
input  [64:0] stream_s_dout;
input   stream_s_empty_n;
output   stream_s_read;
input  [64:0] stream_peek_dout;
input   stream_peek_empty_n;
output   stream_peek_read;
input  [63:0] mmap_offset;

reg ap_idle;
reg m_axi_mmap_AWVALID;
reg m_axi_mmap_WVALID;
reg[31:0] m_axi_mmap_WDATA;
reg m_axi_mmap_BREADY;
reg stream_s_read;
reg stream_peek_read;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
reg   [0:0] or_ln22_reg_263;
reg    ap_block_state4_io;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_state8_pp0_stage1_iter3;
reg   [0:0] or_ln22_reg_263_pp0_iter3_reg;
reg    ap_block_state10_pp0_stage1_iter4;
reg    ap_block_pp0_stage1_subdone;
wire   [0:0] or_ln22_fu_178_p2;
reg   [0:0] ap_phi_mux_phi_ln22_phi_fu_141_p4;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    mmap_blk_n_AW;
wire    ap_block_pp0_stage0;
reg    mmap_blk_n_W;
wire    ap_block_pp0_stage1;
reg   [0:0] or_ln22_reg_263_pp0_iter1_reg;
reg    mmap_blk_n_B;
reg    ap_block_pp0_stage1_11001;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_state5_io;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] tmp_nbreadreq_fu_84_p3;
reg   [0:0] or_ln22_reg_263_pp0_iter2_reg;
reg   [63:0] mmap_addr_reg_267;
wire   [31:0] elem_val_M_elems_fu_233_p1;
reg   [31:0] elem_val_M_elems_reg_274;
reg   [31:0] elem_val_M_elems_1_reg_279;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [0:0] ap_phi_mux_elem_eot_2_phi_fu_131_p4;
wire   [0:0] ap_phi_reg_pp0_iter0_elem_eot_2_reg_128;
wire   [0:0] phitmp_fu_171_p2;
wire   [0:0] ap_phi_reg_pp0_iter0_phi_ln22_reg_138;
wire  signed [63:0] sext_ln27_fu_208_p1;
reg    ap_block_pp0_stage1_01001;
wire    ap_block_pp0_stage0_01001;
reg   [63:0] i_fu_74;
wire   [63:0] i_1_fu_218_p2;
wire    ap_loop_init;
wire   [0:0] stream_peek_read_nbread_fu_92_p2_0;
wire   [63:0] shl_ln25_fu_187_p2;
wire   [63:0] add_ln25_fu_193_p2;
wire   [61:0] trunc_ln_fu_198_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to4;
reg    ap_done_pending_pp0;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

Stream2Mmap_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_fu_74 <= 64'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (or_ln22_fu_178_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        i_fu_74 <= i_1_fu_218_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        or_ln22_reg_263 <= or_ln22_fu_178_p2;
        or_ln22_reg_263_pp0_iter1_reg <= or_ln22_reg_263;
        or_ln22_reg_263_pp0_iter2_reg <= or_ln22_reg_263_pp0_iter1_reg;
        or_ln22_reg_263_pp0_iter3_reg <= or_ln22_reg_263_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln22_reg_263 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        elem_val_M_elems_1_reg_279 <= {{stream_s_dout[63:32]}};
        elem_val_M_elems_reg_274 <= elem_val_M_elems_fu_233_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (or_ln22_fu_178_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        mmap_addr_reg_267 <= sext_ln27_fu_208_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_phi_mux_phi_ln22_phi_fu_141_p4 == 1'd0) & (or_ln22_fu_178_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (~((ap_loop_exit_ready_pp0_iter3_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (ap_loop_exit_ready == 1'b0))) begin
        ap_done_pending_pp0 = 1'b1;
    end else begin
        ap_done_pending_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to4 = 1'b1;
    end else begin
        ap_idle_pp0_1to4 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_nbreadreq_fu_84_p3 == 1'd1)) begin
        ap_phi_mux_elem_eot_2_phi_fu_131_p4 = stream_peek_dout[32'd64];
    end else begin
        ap_phi_mux_elem_eot_2_phi_fu_131_p4 = ap_phi_reg_pp0_iter0_elem_eot_2_reg_128;
    end
end

always @ (*) begin
    if ((tmp_nbreadreq_fu_84_p3 == 1'd0)) begin
        ap_phi_mux_phi_ln22_phi_fu_141_p4 = 1'd1;
    end else if ((tmp_nbreadreq_fu_84_p3 == 1'd1)) begin
        ap_phi_mux_phi_ln22_phi_fu_141_p4 = phitmp_fu_171_p2;
    end else begin
        ap_phi_mux_phi_ln22_phi_fu_141_p4 = ap_phi_reg_pp0_iter0_phi_ln22_reg_138;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln22_reg_263 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_mmap_AWVALID = 1'b1;
    end else begin
        m_axi_mmap_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (or_ln22_reg_263_pp0_iter3_reg == 1'd0))) begin
        m_axi_mmap_BREADY = 1'b1;
    end else begin
        m_axi_mmap_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln22_reg_263_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        m_axi_mmap_WDATA = elem_val_M_elems_1_reg_279;
    end else if (((or_ln22_reg_263 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_01001))) begin
        m_axi_mmap_WDATA = elem_val_M_elems_reg_274;
    end else begin
        m_axi_mmap_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln22_reg_263_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((or_ln22_reg_263 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        m_axi_mmap_WVALID = 1'b1;
    end else begin
        m_axi_mmap_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln22_reg_263 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        mmap_blk_n_AW = m_axi_mmap_AWREADY;
    end else begin
        mmap_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (or_ln22_reg_263_pp0_iter3_reg == 1'd0))) begin
        mmap_blk_n_B = m_axi_mmap_BVALID;
    end else begin
        mmap_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln22_reg_263_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0)) | ((or_ln22_reg_263 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)))) begin
        mmap_blk_n_W = m_axi_mmap_WREADY;
    end else begin
        mmap_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_nbreadreq_fu_84_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (stream_peek_empty_n == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        stream_peek_read = 1'b1;
    end else begin
        stream_peek_read = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln22_reg_263 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (stream_s_empty_n == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        stream_s_read = 1'b1;
    end else begin
        stream_s_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_done_pending_pp0 == 1'b0) & (ap_idle_pp0_1to4 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln25_fu_193_p2 = (shl_ln25_fu_187_p2 + mmap_offset);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state5_io)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state5_io)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((m_axi_mmap_BVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (or_ln22_reg_263_pp0_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((m_axi_mmap_BVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (or_ln22_reg_263_pp0_iter3_reg == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state4_io)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((m_axi_mmap_BVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (or_ln22_reg_263_pp0_iter3_reg == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state4_io)));
end

always @ (*) begin
    ap_block_state10_pp0_stage1_iter4 = ((m_axi_mmap_BVALID == 1'b0) & (or_ln22_reg_263_pp0_iter3_reg == 1'd0));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((or_ln22_reg_263 == 1'd0) & (m_axi_mmap_AWREADY == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((or_ln22_reg_263 == 1'd0) & (m_axi_mmap_WREADY == 1'b0));
end

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((m_axi_mmap_WREADY == 1'b0) & (or_ln22_reg_263_pp0_iter1_reg == 1'd0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_phi_reg_pp0_iter0_elem_eot_2_reg_128 = 'bx;

assign ap_phi_reg_pp0_iter0_phi_ln22_reg_138 = 'bx;

assign elem_val_M_elems_fu_233_p1 = stream_s_dout[31:0];

assign i_1_fu_218_p2 = (i_fu_74 + 64'd1);

assign m_axi_mmap_ARADDR = 64'd0;

assign m_axi_mmap_ARBURST = 2'd0;

assign m_axi_mmap_ARCACHE = 4'd0;

assign m_axi_mmap_ARID = 1'd0;

assign m_axi_mmap_ARLEN = 32'd0;

assign m_axi_mmap_ARLOCK = 2'd0;

assign m_axi_mmap_ARPROT = 3'd0;

assign m_axi_mmap_ARQOS = 4'd0;

assign m_axi_mmap_ARREGION = 4'd0;

assign m_axi_mmap_ARSIZE = 3'd0;

assign m_axi_mmap_ARUSER = 1'd0;

assign m_axi_mmap_ARVALID = 1'b0;

assign m_axi_mmap_AWADDR = mmap_addr_reg_267;

assign m_axi_mmap_AWBURST = 2'd0;

assign m_axi_mmap_AWCACHE = 4'd0;

assign m_axi_mmap_AWID = 1'd0;

assign m_axi_mmap_AWLEN = 32'd2;

assign m_axi_mmap_AWLOCK = 2'd0;

assign m_axi_mmap_AWPROT = 3'd0;

assign m_axi_mmap_AWQOS = 4'd0;

assign m_axi_mmap_AWREGION = 4'd0;

assign m_axi_mmap_AWSIZE = 3'd0;

assign m_axi_mmap_AWUSER = 1'd0;

assign m_axi_mmap_RREADY = 1'b0;

assign m_axi_mmap_WID = 1'd0;

assign m_axi_mmap_WLAST = 1'b0;

assign m_axi_mmap_WSTRB = 4'd15;

assign m_axi_mmap_WUSER = 1'd0;

assign or_ln22_fu_178_p2 = (ap_phi_mux_phi_ln22_phi_fu_141_p4 | ap_phi_mux_elem_eot_2_phi_fu_131_p4);

assign phitmp_fu_171_p2 = (stream_peek_read_nbread_fu_92_p2_0 ^ 1'd1);

assign sext_ln27_fu_208_p1 = $signed(trunc_ln_fu_198_p4);

assign shl_ln25_fu_187_p2 = i_fu_74 << 64'd3;

assign stream_peek_read_nbread_fu_92_p2_0 = stream_peek_empty_n;

assign tmp_nbreadreq_fu_84_p3 = stream_s_empty_n;

assign trunc_ln_fu_198_p4 = {{add_ln25_fu_193_p2[63:2]}};

endmodule //Stream2Mmap_Stream2Mmap_Pipeline_VITIS_LOOP_18_1
