// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Module0Func_Module0Func_Pipeline_module_0_epoch (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        fifo_st_0_din,
        fifo_st_0_full_n,
        fifo_st_0_write,
        fifo_st_1_din,
        fifo_st_1_full_n,
        fifo_st_1_write,
        dram_t1_bank_0_fifo_s_dout,
        dram_t1_bank_0_fifo_s_empty_n,
        dram_t1_bank_0_fifo_s_read,
        dram_t1_bank_0_fifo_peek_dout,
        dram_t1_bank_0_fifo_peek_empty_n,
        dram_t1_bank_0_fifo_peek_read
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [32:0] fifo_st_0_din;
input   fifo_st_0_full_n;
output   fifo_st_0_write;
output  [32:0] fifo_st_1_din;
input   fifo_st_1_full_n;
output   fifo_st_1_write;
input  [64:0] dram_t1_bank_0_fifo_s_dout;
input   dram_t1_bank_0_fifo_s_empty_n;
output   dram_t1_bank_0_fifo_s_read;
input  [64:0] dram_t1_bank_0_fifo_peek_dout;
input   dram_t1_bank_0_fifo_peek_empty_n;
output   dram_t1_bank_0_fifo_peek_read;

reg ap_idle;
reg fifo_st_0_write;
reg fifo_st_1_write;
reg dram_t1_bank_0_fifo_s_read;
reg dram_t1_bank_0_fifo_peek_read;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] is_success_reg_92;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] and_ln31_fu_121_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    fifo_st_0_blk_n;
wire    ap_block_pp0_stage0;
reg    fifo_st_1_blk_n;
wire   [0:0] tmp_nbreadreq_fu_48_p3;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] trunc_ln164_fu_131_p1;
reg   [31:0] trunc_ln164_reg_168;
reg   [0:0] ap_phi_mux_is_success_phi_fu_95_p4;
reg   [31:0] trunc_ln_reg_173;
reg   [0:0] ap_phi_mux_elem_eot_2_phi_fu_85_p4;
wire   [0:0] ap_phi_reg_pp0_iter0_elem_eot_2_reg_82;
wire   [0:0] ap_phi_reg_pp0_iter0_is_success_reg_92;
wire   [0:0] dram_t1_bank_0_fifo_peek_read_nbread_fu_56_p2_0;
reg    ap_block_pp0_stage0_01001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_loop_init;
reg    ap_condition_103;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Module0Func_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_103)) begin
        if ((tmp_nbreadreq_fu_48_p3 == 1'd0)) begin
            is_success_reg_92 <= 1'd0;
        end else if ((tmp_nbreadreq_fu_48_p3 == 1'd1)) begin
            is_success_reg_92 <= dram_t1_bank_0_fifo_peek_read_nbread_fu_56_p2_0;
        end else if (~(1'd1 == and_ln31_fu_121_p2)) begin
            is_success_reg_92 <= ap_phi_reg_pp0_iter0_is_success_reg_92;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_is_success_phi_fu_95_p4 == 1'd1) & (1'd0 == and_ln31_fu_121_p2) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln164_reg_168 <= trunc_ln164_fu_131_p1;
        trunc_ln_reg_173 <= {{dram_t1_bank_0_fifo_s_dout[63:32]}};
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'd1 == and_ln31_fu_121_p2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_nbreadreq_fu_48_p3 == 1'd1)) begin
        ap_phi_mux_elem_eot_2_phi_fu_85_p4 = dram_t1_bank_0_fifo_peek_dout[32'd64];
    end else begin
        ap_phi_mux_elem_eot_2_phi_fu_85_p4 = ap_phi_reg_pp0_iter0_elem_eot_2_reg_82;
    end
end

always @ (*) begin
    if ((tmp_nbreadreq_fu_48_p3 == 1'd0)) begin
        ap_phi_mux_is_success_phi_fu_95_p4 = 1'd0;
    end else if ((tmp_nbreadreq_fu_48_p3 == 1'd1)) begin
        ap_phi_mux_is_success_phi_fu_95_p4 = dram_t1_bank_0_fifo_peek_read_nbread_fu_56_p2_0;
    end else begin
        ap_phi_mux_is_success_phi_fu_95_p4 = ap_phi_reg_pp0_iter0_is_success_reg_92;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_nbreadreq_fu_48_p3 == 1'd1) & (dram_t1_bank_0_fifo_peek_empty_n == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dram_t1_bank_0_fifo_peek_read = 1'b1;
    end else begin
        dram_t1_bank_0_fifo_peek_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_phi_mux_is_success_phi_fu_95_p4 == 1'd1) & (1'd0 == and_ln31_fu_121_p2) & (dram_t1_bank_0_fifo_s_empty_n == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dram_t1_bank_0_fifo_s_read = 1'b1;
    end else begin
        dram_t1_bank_0_fifo_s_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (is_success_reg_92 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifo_st_0_blk_n = fifo_st_0_full_n;
    end else begin
        fifo_st_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (is_success_reg_92 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifo_st_0_write = 1'b1;
    end else begin
        fifo_st_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (is_success_reg_92 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifo_st_1_blk_n = fifo_st_1_full_n;
    end else begin
        fifo_st_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (is_success_reg_92 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fifo_st_1_write = 1'b1;
    end else begin
        fifo_st_1_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln31_fu_121_p2 = (ap_phi_mux_is_success_phi_fu_95_p4 & ap_phi_mux_elem_eot_2_phi_fu_85_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((fifo_st_1_full_n == 1'b0) & (is_success_reg_92 == 1'd1)) | ((is_success_reg_92 == 1'd1) & (fifo_st_0_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((fifo_st_1_full_n == 1'b0) & (is_success_reg_92 == 1'd1)) | ((is_success_reg_92 == 1'd1) & (fifo_st_0_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((fifo_st_1_full_n == 1'b0) & (is_success_reg_92 == 1'd1)) | ((is_success_reg_92 == 1'd1) & (fifo_st_0_full_n == 1'b0))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((fifo_st_1_full_n == 1'b0) & (is_success_reg_92 == 1'd1)) | ((is_success_reg_92 == 1'd1) & (fifo_st_0_full_n == 1'b0)));
end

always @ (*) begin
    ap_condition_103 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_elem_eot_2_reg_82 = 'bx;

assign ap_phi_reg_pp0_iter0_is_success_reg_92 = 'bx;

assign dram_t1_bank_0_fifo_peek_read_nbread_fu_56_p2_0 = dram_t1_bank_0_fifo_peek_empty_n;

assign fifo_st_0_din = {{1'd0}, {trunc_ln_reg_173}};

assign fifo_st_1_din = {{1'd0}, {trunc_ln164_reg_168}};

assign tmp_nbreadreq_fu_48_p3 = dram_t1_bank_0_fifo_s_empty_n;

assign trunc_ln164_fu_131_p1 = dram_t1_bank_0_fifo_s_dout[31:0];

endmodule //Module0Func_Module0Func_Pipeline_module_0_epoch
