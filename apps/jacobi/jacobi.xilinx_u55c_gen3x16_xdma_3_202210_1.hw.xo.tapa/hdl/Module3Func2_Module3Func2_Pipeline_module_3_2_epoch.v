// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Module3Func2_Module3Func2_Pipeline_module_3_2_epoch (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        fifo_st_0_din,
        fifo_st_0_full_n,
        fifo_st_0_write,
        fifo_ld_0_s_dout,
        fifo_ld_0_s_empty_n,
        fifo_ld_0_s_read,
        fifo_ld_1_s_dout,
        fifo_ld_1_s_empty_n,
        fifo_ld_1_s_read,
        fifo_ld_0_peek_dout,
        fifo_ld_0_peek_empty_n,
        fifo_ld_0_peek_read,
        fifo_ld_1_peek_dout,
        fifo_ld_1_peek_empty_n,
        fifo_ld_1_peek_read
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [32:0] fifo_st_0_din;
input   fifo_st_0_full_n;
output   fifo_st_0_write;
input  [32:0] fifo_ld_0_s_dout;
input   fifo_ld_0_s_empty_n;
output   fifo_ld_0_s_read;
input  [32:0] fifo_ld_1_s_dout;
input   fifo_ld_1_s_empty_n;
output   fifo_ld_1_s_read;
input  [32:0] fifo_ld_0_peek_dout;
input   fifo_ld_0_peek_empty_n;
output   fifo_ld_0_peek_read;
input  [32:0] fifo_ld_1_peek_dout;
input   fifo_ld_1_peek_empty_n;
output   fifo_ld_1_peek_read;

reg ap_idle;
reg fifo_st_0_write;
reg fifo_ld_0_s_read;
reg fifo_ld_1_s_read;
reg fifo_ld_0_peek_read;
reg fifo_ld_1_peek_read;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
reg   [0:0] or_ln48_2_reg_333;
reg   [0:0] or_ln48_2_reg_333_pp0_iter6_reg;
reg    ap_block_state8_pp0_stage0_iter7;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] or_ln48_1_fu_229_p2;
wire   [0:0] or_ln48_fu_193_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    fifo_st_0_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] tmp_nbreadreq_fu_54_p3;
reg   [0:0] or_ln48_reg_321;
wire   [0:0] tmp_3_nbreadreq_fu_68_p3;
reg   [0:0] or_ln48_1_reg_329;
wire   [0:0] or_ln48_2_fu_235_p2;
reg   [0:0] or_ln48_2_reg_333_pp0_iter1_reg;
reg   [0:0] or_ln48_2_reg_333_pp0_iter2_reg;
reg   [0:0] or_ln48_2_reg_333_pp0_iter3_reg;
reg   [0:0] or_ln48_2_reg_333_pp0_iter4_reg;
reg   [0:0] or_ln48_2_reg_333_pp0_iter5_reg;
wire   [0:0] do_ld_0_fu_244_p2;
reg   [0:0] do_ld_0_reg_337;
wire   [31:0] trunc_ln164_fu_254_p1;
reg   [31:0] trunc_ln164_reg_341;
wire   [31:0] trunc_ln164_1_fu_265_p1;
reg   [31:0] trunc_ln164_1_reg_346;
reg   [0:0] ap_phi_mux_phi_ln48_phi_fu_104_p4;
wire   [0:0] phitmp_fu_179_p2;
wire   [0:0] ap_phi_reg_pp0_iter0_phi_ln48_reg_101;
reg   [0:0] ap_phi_mux_phi_ln48_1_phi_fu_114_p4;
wire   [0:0] phitmp1_fu_186_p2;
wire   [0:0] ap_phi_reg_pp0_iter0_phi_ln48_1_reg_111;
reg   [0:0] ap_phi_mux_phi_ln48_2_phi_fu_124_p4;
wire   [0:0] phitmp3_fu_222_p2;
wire   [0:0] ap_phi_reg_pp0_iter0_phi_ln48_2_reg_121;
reg   [0:0] ap_phi_mux_phi_ln48_3_phi_fu_134_p4;
wire   [0:0] phitmp2_fu_215_p2;
wire   [0:0] ap_phi_reg_pp0_iter0_phi_ln48_3_reg_131;
reg   [31:0] ap_phi_mux_fifo_ref_0_1_phi_fu_145_p4;
wire   [31:0] elem_val_1_fu_288_p1;
reg   [31:0] ap_phi_reg_pp0_iter1_fifo_ref_0_1_reg_141;
wire   [31:0] ap_phi_reg_pp0_iter0_fifo_ref_0_1_reg_141;
reg   [31:0] count_fu_50;
wire   [31:0] count_1_fu_275_p3;
wire    ap_loop_init;
reg   [31:0] ap_sig_allocacmp_count_load_1;
reg   [31:0] ap_sig_allocacmp_count_load;
wire   [0:0] fifo_ld_0_peek_read_nbread_fu_62_p2_0;
wire   [0:0] fifo_ld_1_peek_read_nbread_fu_76_p2_0;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] grp_fu_153_p1;
wire   [0:0] elem_eot_fu_171_p3;
wire   [0:0] elem_eot_1_fu_207_p3;
wire   [31:0] add_ln57_fu_269_p2;
wire   [31:0] grp_fu_153_p2;
wire   [31:0] bitcast_ln174_fu_296_p1;
reg    grp_fu_153_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_247;
reg    ap_condition_206;
reg    ap_condition_446;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Module3Func2_fadd_32ns_32ns_32_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_7_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_fifo_ref_0_1_phi_fu_145_p4),
    .din1(grp_fu_153_p1),
    .ce(grp_fu_153_ce),
    .dout(grp_fu_153_p2)
);

Module3Func2_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_206)) begin
        if ((1'b1 == ap_condition_247)) begin
            ap_phi_reg_pp0_iter1_fifo_ref_0_1_reg_141 <= 32'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_fifo_ref_0_1_reg_141 <= ap_phi_reg_pp0_iter0_fifo_ref_0_1_reg_141;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_446)) begin
            count_fu_50 <= count_1_fu_275_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            count_fu_50 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        or_ln48_2_reg_333_pp0_iter1_reg <= or_ln48_2_reg_333;
        or_ln48_reg_321 <= or_ln48_fu_193_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        or_ln48_2_reg_333_pp0_iter2_reg <= or_ln48_2_reg_333_pp0_iter1_reg;
        or_ln48_2_reg_333_pp0_iter3_reg <= or_ln48_2_reg_333_pp0_iter2_reg;
        or_ln48_2_reg_333_pp0_iter4_reg <= or_ln48_2_reg_333_pp0_iter3_reg;
        or_ln48_2_reg_333_pp0_iter5_reg <= or_ln48_2_reg_333_pp0_iter4_reg;
        or_ln48_2_reg_333_pp0_iter6_reg <= or_ln48_2_reg_333_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln48_fu_193_p2 == 1'd1) & (or_ln48_1_fu_229_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln48_2_fu_235_p2 == 1'd0))) begin
        do_ld_0_reg_337 <= do_ld_0_fu_244_p2;
        trunc_ln164_1_reg_346 <= trunc_ln164_1_fu_265_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln48_fu_193_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_ln48_1_reg_329 <= or_ln48_1_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln48_fu_193_p2 == 1'd1) & (or_ln48_1_fu_229_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_ln48_2_reg_333 <= or_ln48_2_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln48_fu_193_p2 == 1'd1) & (or_ln48_1_fu_229_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (do_ld_0_fu_244_p2 == 1'd1) & (or_ln48_2_fu_235_p2 == 1'd0))) begin
        trunc_ln164_reg_341 <= trunc_ln164_fu_254_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((or_ln48_fu_193_p2 == 1'd0) | (or_ln48_1_fu_229_p2 == 1'd0)))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln48_2_reg_333 == 1'd0) & (do_ld_0_reg_337 == 1'd1) & (or_ln48_1_reg_329 == 1'd1) & (or_ln48_reg_321 == 1'd1))) begin
        ap_phi_mux_fifo_ref_0_1_phi_fu_145_p4 = elem_val_1_fu_288_p1;
    end else begin
        ap_phi_mux_fifo_ref_0_1_phi_fu_145_p4 = ap_phi_reg_pp0_iter1_fifo_ref_0_1_reg_141;
    end
end

always @ (*) begin
    if ((tmp_nbreadreq_fu_54_p3 == 1'd0)) begin
        ap_phi_mux_phi_ln48_1_phi_fu_114_p4 = 1'd1;
    end else if ((tmp_nbreadreq_fu_54_p3 == 1'd1)) begin
        ap_phi_mux_phi_ln48_1_phi_fu_114_p4 = phitmp1_fu_186_p2;
    end else begin
        ap_phi_mux_phi_ln48_1_phi_fu_114_p4 = ap_phi_reg_pp0_iter0_phi_ln48_1_reg_111;
    end
end

always @ (*) begin
    if (((or_ln48_fu_193_p2 == 1'd1) & (tmp_3_nbreadreq_fu_68_p3 == 1'd1))) begin
        ap_phi_mux_phi_ln48_2_phi_fu_124_p4 = phitmp3_fu_222_p2;
    end else begin
        ap_phi_mux_phi_ln48_2_phi_fu_124_p4 = ap_phi_reg_pp0_iter0_phi_ln48_2_reg_121;
    end
end

always @ (*) begin
    if ((or_ln48_fu_193_p2 == 1'd1)) begin
        if ((tmp_3_nbreadreq_fu_68_p3 == 1'd0)) begin
            ap_phi_mux_phi_ln48_3_phi_fu_134_p4 = 1'd1;
        end else if ((tmp_3_nbreadreq_fu_68_p3 == 1'd1)) begin
            ap_phi_mux_phi_ln48_3_phi_fu_134_p4 = phitmp2_fu_215_p2;
        end else begin
            ap_phi_mux_phi_ln48_3_phi_fu_134_p4 = ap_phi_reg_pp0_iter0_phi_ln48_3_reg_131;
        end
    end else begin
        ap_phi_mux_phi_ln48_3_phi_fu_134_p4 = ap_phi_reg_pp0_iter0_phi_ln48_3_reg_131;
    end
end

always @ (*) begin
    if ((tmp_nbreadreq_fu_54_p3 == 1'd1)) begin
        ap_phi_mux_phi_ln48_phi_fu_104_p4 = phitmp_fu_179_p2;
    end else begin
        ap_phi_mux_phi_ln48_phi_fu_104_p4 = ap_phi_reg_pp0_iter0_phi_ln48_reg_101;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_count_load = 32'd0;
    end else begin
        ap_sig_allocacmp_count_load = count_fu_50;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_count_load_1 = 32'd0;
    end else begin
        ap_sig_allocacmp_count_load_1 = count_fu_50;
    end
end

always @ (*) begin
    if (((fifo_ld_0_peek_empty_n == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_nbreadreq_fu_54_p3 == 1'd1))) begin
        fifo_ld_0_peek_read = 1'b1;
    end else begin
        fifo_ld_0_peek_read = 1'b0;
    end
end

always @ (*) begin
    if (((fifo_ld_0_s_empty_n == 1'b1) & (or_ln48_fu_193_p2 == 1'd1) & (or_ln48_1_fu_229_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (do_ld_0_fu_244_p2 == 1'd1) & (or_ln48_2_fu_235_p2 == 1'd0))) begin
        fifo_ld_0_s_read = 1'b1;
    end else begin
        fifo_ld_0_s_read = 1'b0;
    end
end

always @ (*) begin
    if (((fifo_ld_1_peek_empty_n == 1'b1) & (or_ln48_fu_193_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_3_nbreadreq_fu_68_p3 == 1'd1))) begin
        fifo_ld_1_peek_read = 1'b1;
    end else begin
        fifo_ld_1_peek_read = 1'b0;
    end
end

always @ (*) begin
    if (((fifo_ld_1_s_empty_n == 1'b1) & (or_ln48_fu_193_p2 == 1'd1) & (or_ln48_1_fu_229_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln48_2_fu_235_p2 == 1'd0))) begin
        fifo_ld_1_s_read = 1'b1;
    end else begin
        fifo_ld_1_s_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (or_ln48_2_reg_333_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        fifo_st_0_blk_n = fifo_st_0_full_n;
    end else begin
        fifo_st_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln48_2_reg_333_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        fifo_st_0_write = 1'b1;
    end else begin
        fifo_st_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_153_ce = 1'b1;
    end else begin
        grp_fu_153_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln57_fu_269_p2 = (ap_sig_allocacmp_count_load + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((or_ln48_2_reg_333_pp0_iter6_reg == 1'd0) & (fifo_st_0_full_n == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((or_ln48_2_reg_333_pp0_iter6_reg == 1'd0) & (fifo_st_0_full_n == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((or_ln48_2_reg_333_pp0_iter6_reg == 1'd0) & (fifo_st_0_full_n == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp0_stage0_iter7 = ((or_ln48_2_reg_333_pp0_iter6_reg == 1'd0) & (fifo_st_0_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_206 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_247 = ((or_ln48_fu_193_p2 == 1'd1) & (or_ln48_1_fu_229_p2 == 1'd1) & (do_ld_0_fu_244_p2 == 1'd0) & (or_ln48_2_fu_235_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_446 = ((or_ln48_fu_193_p2 == 1'd1) & (or_ln48_1_fu_229_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (or_ln48_2_fu_235_p2 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_fifo_ref_0_1_reg_141 = 'bx;

assign ap_phi_reg_pp0_iter0_phi_ln48_1_reg_111 = 'bx;

assign ap_phi_reg_pp0_iter0_phi_ln48_2_reg_121 = 'bx;

assign ap_phi_reg_pp0_iter0_phi_ln48_3_reg_131 = 'bx;

assign ap_phi_reg_pp0_iter0_phi_ln48_reg_101 = 'bx;

assign bitcast_ln174_fu_296_p1 = grp_fu_153_p2;

assign count_1_fu_275_p3 = ((do_ld_0_fu_244_p2[0:0] == 1'b1) ? ap_sig_allocacmp_count_load : add_ln57_fu_269_p2);

assign do_ld_0_fu_244_p2 = (($signed(ap_sig_allocacmp_count_load_1) > $signed(32'd50)) ? 1'b1 : 1'b0);

assign elem_eot_1_fu_207_p3 = fifo_ld_1_peek_dout[32'd32];

assign elem_eot_fu_171_p3 = fifo_ld_0_peek_dout[32'd32];

assign elem_val_1_fu_288_p1 = trunc_ln164_reg_341;

assign fifo_ld_0_peek_read_nbread_fu_62_p2_0 = fifo_ld_0_peek_empty_n;

assign fifo_ld_1_peek_read_nbread_fu_76_p2_0 = fifo_ld_1_peek_empty_n;

assign fifo_st_0_din = {{1'd0}, {bitcast_ln174_fu_296_p1}};

assign grp_fu_153_p1 = trunc_ln164_1_reg_346;

assign or_ln48_1_fu_229_p2 = (ap_phi_mux_phi_ln48_3_phi_fu_134_p4 | ap_phi_mux_phi_ln48_2_phi_fu_124_p4);

assign or_ln48_2_fu_235_p2 = (ap_phi_mux_phi_ln48_3_phi_fu_134_p4 | ap_phi_mux_phi_ln48_1_phi_fu_114_p4);

assign or_ln48_fu_193_p2 = (ap_phi_mux_phi_ln48_phi_fu_104_p4 | ap_phi_mux_phi_ln48_1_phi_fu_114_p4);

assign phitmp1_fu_186_p2 = (fifo_ld_0_peek_read_nbread_fu_62_p2_0 ^ 1'd1);

assign phitmp2_fu_215_p2 = (fifo_ld_1_peek_read_nbread_fu_76_p2_0 ^ 1'd1);

assign phitmp3_fu_222_p2 = (elem_eot_1_fu_207_p3 ^ 1'd1);

assign phitmp_fu_179_p2 = (elem_eot_fu_171_p3 ^ 1'd1);

assign tmp_3_nbreadreq_fu_68_p3 = fifo_ld_1_s_empty_n;

assign tmp_nbreadreq_fu_54_p3 = fifo_ld_0_s_empty_n;

assign trunc_ln164_1_fu_265_p1 = fifo_ld_1_s_dout[31:0];

assign trunc_ln164_fu_254_p1 = fifo_ld_0_s_dout[31:0];

endmodule //Module3Func2_Module3Func2_Pipeline_module_3_2_epoch
