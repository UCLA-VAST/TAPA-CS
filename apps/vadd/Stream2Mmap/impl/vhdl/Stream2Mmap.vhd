-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Stream2Mmap is
generic (
    C_M_AXI_MMAP_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_MMAP_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MMAP_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MMAP_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MMAP_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MMAP_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MMAP_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MMAP_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MMAP_USER_VALUE : INTEGER := 0;
    C_M_AXI_MMAP_PROT_VALUE : INTEGER := 0;
    C_M_AXI_MMAP_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_mmap_AWVALID : OUT STD_LOGIC;
    m_axi_mmap_AWREADY : IN STD_LOGIC;
    m_axi_mmap_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MMAP_ADDR_WIDTH-1 downto 0);
    m_axi_mmap_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MMAP_ID_WIDTH-1 downto 0);
    m_axi_mmap_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mmap_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mmap_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mmap_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mmap_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mmap_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mmap_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mmap_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mmap_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MMAP_AWUSER_WIDTH-1 downto 0);
    m_axi_mmap_WVALID : OUT STD_LOGIC;
    m_axi_mmap_WREADY : IN STD_LOGIC;
    m_axi_mmap_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MMAP_DATA_WIDTH-1 downto 0);
    m_axi_mmap_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MMAP_DATA_WIDTH/8-1 downto 0);
    m_axi_mmap_WLAST : OUT STD_LOGIC;
    m_axi_mmap_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MMAP_ID_WIDTH-1 downto 0);
    m_axi_mmap_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MMAP_WUSER_WIDTH-1 downto 0);
    m_axi_mmap_ARVALID : OUT STD_LOGIC;
    m_axi_mmap_ARREADY : IN STD_LOGIC;
    m_axi_mmap_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MMAP_ADDR_WIDTH-1 downto 0);
    m_axi_mmap_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MMAP_ID_WIDTH-1 downto 0);
    m_axi_mmap_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mmap_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mmap_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mmap_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mmap_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mmap_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mmap_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mmap_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mmap_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MMAP_ARUSER_WIDTH-1 downto 0);
    m_axi_mmap_RVALID : IN STD_LOGIC;
    m_axi_mmap_RREADY : OUT STD_LOGIC;
    m_axi_mmap_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MMAP_DATA_WIDTH-1 downto 0);
    m_axi_mmap_RLAST : IN STD_LOGIC;
    m_axi_mmap_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MMAP_ID_WIDTH-1 downto 0);
    m_axi_mmap_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MMAP_RUSER_WIDTH-1 downto 0);
    m_axi_mmap_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mmap_BVALID : IN STD_LOGIC;
    m_axi_mmap_BREADY : OUT STD_LOGIC;
    m_axi_mmap_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mmap_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MMAP_ID_WIDTH-1 downto 0);
    m_axi_mmap_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MMAP_BUSER_WIDTH-1 downto 0);
    stream_s_dout : IN STD_LOGIC_VECTOR (32 downto 0);
    stream_s_empty_n : IN STD_LOGIC;
    stream_s_read : OUT STD_LOGIC;
    stream_peek_dout : IN STD_LOGIC_VECTOR (32 downto 0);
    stream_peek_empty_n : IN STD_LOGIC;
    stream_peek_read : OUT STD_LOGIC;
    mmap_offset : IN STD_LOGIC_VECTOR (63 downto 0);
    n : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of Stream2Mmap is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Stream2Mmap_Stream2Mmap,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu55c-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.330000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.430900,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=940,HLS_SYN_LUT=1459,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mmap_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln24_reg_142 : STD_LOGIC_VECTOR (0 downto 0);
    signal mmap_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln24_fu_105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln24_1_fu_111_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln24_1_reg_146 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_ap_start : STD_LOGIC;
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_ap_done : STD_LOGIC;
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_ap_idle : STD_LOGIC;
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_ap_ready : STD_LOGIC;
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_stream_s_read : STD_LOGIC;
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_AWVALID : STD_LOGIC;
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_WVALID : STD_LOGIC;
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_WLAST : STD_LOGIC;
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_ARVALID : STD_LOGIC;
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_RREADY : STD_LOGIC;
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_BREADY : STD_LOGIC;
    signal mmap_AWVALID : STD_LOGIC;
    signal mmap_AWREADY : STD_LOGIC;
    signal mmap_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal mmap_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal mmap_WVALID : STD_LOGIC;
    signal mmap_WREADY : STD_LOGIC;
    signal mmap_ARREADY : STD_LOGIC;
    signal mmap_RVALID : STD_LOGIC;
    signal mmap_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal mmap_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal mmap_BVALID : STD_LOGIC;
    signal mmap_BREADY : STD_LOGIC;
    signal grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm_state3 : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sext_ln24_fu_121_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal trunc_ln24_fu_132_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state9 : BOOLEAN;
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Stream2Mmap_Stream2Mmap_Pipeline_VITIS_LOOP_24_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        stream_s_dout : IN STD_LOGIC_VECTOR (32 downto 0);
        stream_s_empty_n : IN STD_LOGIC;
        stream_s_read : OUT STD_LOGIC;
        m_axi_mmap_AWVALID : OUT STD_LOGIC;
        m_axi_mmap_AWREADY : IN STD_LOGIC;
        m_axi_mmap_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_mmap_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mmap_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mmap_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mmap_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mmap_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mmap_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mmap_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mmap_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mmap_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mmap_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mmap_WVALID : OUT STD_LOGIC;
        m_axi_mmap_WREADY : IN STD_LOGIC;
        m_axi_mmap_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mmap_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mmap_WLAST : OUT STD_LOGIC;
        m_axi_mmap_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mmap_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mmap_ARVALID : OUT STD_LOGIC;
        m_axi_mmap_ARREADY : IN STD_LOGIC;
        m_axi_mmap_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_mmap_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mmap_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mmap_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mmap_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mmap_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mmap_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mmap_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mmap_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mmap_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mmap_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mmap_RVALID : IN STD_LOGIC;
        m_axi_mmap_RREADY : OUT STD_LOGIC;
        m_axi_mmap_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mmap_RLAST : IN STD_LOGIC;
        m_axi_mmap_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mmap_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_mmap_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mmap_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mmap_BVALID : IN STD_LOGIC;
        m_axi_mmap_BREADY : OUT STD_LOGIC;
        m_axi_mmap_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mmap_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mmap_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln24 : IN STD_LOGIC_VECTOR (61 downto 0);
        n : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Stream2Mmap_mmap_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95 : component Stream2Mmap_Stream2Mmap_Pipeline_VITIS_LOOP_24_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_ap_start,
        ap_done => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_ap_done,
        ap_idle => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_ap_idle,
        ap_ready => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_ap_ready,
        stream_s_dout => stream_s_dout,
        stream_s_empty_n => stream_s_empty_n,
        stream_s_read => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_stream_s_read,
        m_axi_mmap_AWVALID => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_AWVALID,
        m_axi_mmap_AWREADY => mmap_AWREADY,
        m_axi_mmap_AWADDR => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_AWADDR,
        m_axi_mmap_AWID => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_AWID,
        m_axi_mmap_AWLEN => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_AWLEN,
        m_axi_mmap_AWSIZE => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_AWSIZE,
        m_axi_mmap_AWBURST => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_AWBURST,
        m_axi_mmap_AWLOCK => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_AWLOCK,
        m_axi_mmap_AWCACHE => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_AWCACHE,
        m_axi_mmap_AWPROT => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_AWPROT,
        m_axi_mmap_AWQOS => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_AWQOS,
        m_axi_mmap_AWREGION => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_AWREGION,
        m_axi_mmap_AWUSER => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_AWUSER,
        m_axi_mmap_WVALID => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_WVALID,
        m_axi_mmap_WREADY => mmap_WREADY,
        m_axi_mmap_WDATA => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_WDATA,
        m_axi_mmap_WSTRB => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_WSTRB,
        m_axi_mmap_WLAST => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_WLAST,
        m_axi_mmap_WID => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_WID,
        m_axi_mmap_WUSER => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_WUSER,
        m_axi_mmap_ARVALID => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_ARVALID,
        m_axi_mmap_ARREADY => ap_const_logic_0,
        m_axi_mmap_ARADDR => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_ARADDR,
        m_axi_mmap_ARID => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_ARID,
        m_axi_mmap_ARLEN => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_ARLEN,
        m_axi_mmap_ARSIZE => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_ARSIZE,
        m_axi_mmap_ARBURST => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_ARBURST,
        m_axi_mmap_ARLOCK => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_ARLOCK,
        m_axi_mmap_ARCACHE => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_ARCACHE,
        m_axi_mmap_ARPROT => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_ARPROT,
        m_axi_mmap_ARQOS => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_ARQOS,
        m_axi_mmap_ARREGION => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_ARREGION,
        m_axi_mmap_ARUSER => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_ARUSER,
        m_axi_mmap_RVALID => ap_const_logic_0,
        m_axi_mmap_RREADY => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_RREADY,
        m_axi_mmap_RDATA => ap_const_lv32_0,
        m_axi_mmap_RLAST => ap_const_logic_0,
        m_axi_mmap_RID => ap_const_lv1_0,
        m_axi_mmap_RFIFONUM => ap_const_lv9_0,
        m_axi_mmap_RUSER => ap_const_lv1_0,
        m_axi_mmap_RRESP => ap_const_lv2_0,
        m_axi_mmap_BVALID => mmap_BVALID,
        m_axi_mmap_BREADY => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_BREADY,
        m_axi_mmap_BRESP => ap_const_lv2_0,
        m_axi_mmap_BID => ap_const_lv1_0,
        m_axi_mmap_BUSER => ap_const_lv1_0,
        sext_ln24 => trunc_ln24_1_reg_146,
        n => n);

    mmap_m_axi_U : component Stream2Mmap_mmap_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 9,
        C_M_AXI_ID_WIDTH => C_M_AXI_MMAP_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MMAP_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MMAP_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MMAP_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MMAP_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MMAP_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MMAP_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MMAP_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_MMAP_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MMAP_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MMAP_CACHE_VALUE,
        USER_DW => 32,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_mmap_AWVALID,
        AWREADY => m_axi_mmap_AWREADY,
        AWADDR => m_axi_mmap_AWADDR,
        AWID => m_axi_mmap_AWID,
        AWLEN => m_axi_mmap_AWLEN,
        AWSIZE => m_axi_mmap_AWSIZE,
        AWBURST => m_axi_mmap_AWBURST,
        AWLOCK => m_axi_mmap_AWLOCK,
        AWCACHE => m_axi_mmap_AWCACHE,
        AWPROT => m_axi_mmap_AWPROT,
        AWQOS => m_axi_mmap_AWQOS,
        AWREGION => m_axi_mmap_AWREGION,
        AWUSER => m_axi_mmap_AWUSER,
        WVALID => m_axi_mmap_WVALID,
        WREADY => m_axi_mmap_WREADY,
        WDATA => m_axi_mmap_WDATA,
        WSTRB => m_axi_mmap_WSTRB,
        WLAST => m_axi_mmap_WLAST,
        WID => m_axi_mmap_WID,
        WUSER => m_axi_mmap_WUSER,
        ARVALID => m_axi_mmap_ARVALID,
        ARREADY => m_axi_mmap_ARREADY,
        ARADDR => m_axi_mmap_ARADDR,
        ARID => m_axi_mmap_ARID,
        ARLEN => m_axi_mmap_ARLEN,
        ARSIZE => m_axi_mmap_ARSIZE,
        ARBURST => m_axi_mmap_ARBURST,
        ARLOCK => m_axi_mmap_ARLOCK,
        ARCACHE => m_axi_mmap_ARCACHE,
        ARPROT => m_axi_mmap_ARPROT,
        ARQOS => m_axi_mmap_ARQOS,
        ARREGION => m_axi_mmap_ARREGION,
        ARUSER => m_axi_mmap_ARUSER,
        RVALID => m_axi_mmap_RVALID,
        RREADY => m_axi_mmap_RREADY,
        RDATA => m_axi_mmap_RDATA,
        RLAST => m_axi_mmap_RLAST,
        RID => m_axi_mmap_RID,
        RUSER => m_axi_mmap_RUSER,
        RRESP => m_axi_mmap_RRESP,
        BVALID => m_axi_mmap_BVALID,
        BREADY => m_axi_mmap_BREADY,
        BRESP => m_axi_mmap_BRESP,
        BID => m_axi_mmap_BID,
        BUSER => m_axi_mmap_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => mmap_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARLEN => ap_const_lv32_0,
        I_RVALID => mmap_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => mmap_RDATA,
        I_RFIFONUM => mmap_RFIFONUM,
        I_AWVALID => mmap_AWVALID,
        I_AWREADY => mmap_AWREADY,
        I_AWADDR => mmap_AWADDR,
        I_AWLEN => mmap_AWLEN,
        I_WVALID => mmap_WVALID,
        I_WREADY => mmap_WREADY,
        I_WDATA => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_WDATA,
        I_WSTRB => grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_WSTRB,
        I_BVALID => mmap_BVALID,
        I_BREADY => mmap_BREADY);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_NS_fsm_state3))) then 
                    grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_ap_ready = ap_const_logic_1)) then 
                    grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln24_reg_142 <= icmp_ln24_fu_105_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_142 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln24_1_reg_146 <= mmap_offset(63 downto 2);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln24_reg_142, ap_CS_fsm_state9, grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_ap_done, mmap_BVALID, ap_CS_fsm_state4, ap_block_state2_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln24_reg_142 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                elsif (((icmp_ln24_reg_142 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if ((not(((icmp_ln24_reg_142 = ap_const_lv1_0) and (mmap_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state3 <= ap_NS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state2_io)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_ap_done)
    begin
        if ((grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_ST_fsm_state9_blk_assign_proc : process(icmp_ln24_reg_142, mmap_BVALID)
    begin
        if (((icmp_ln24_reg_142 = ap_const_lv1_0) and (mmap_BVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state2_io_assign_proc : process(icmp_ln24_reg_142, mmap_AWREADY)
    begin
                ap_block_state2_io <= ((icmp_ln24_reg_142 = ap_const_lv1_0) and (mmap_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state9_assign_proc : process(icmp_ln24_reg_142, mmap_BVALID)
    begin
                ap_block_state9 <= ((icmp_ln24_reg_142 = ap_const_lv1_0) and (mmap_BVALID = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(icmp_ln24_reg_142, ap_CS_fsm_state9, mmap_BVALID)
    begin
        if ((not(((icmp_ln24_reg_142 = ap_const_lv1_0) and (mmap_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln24_reg_142, ap_CS_fsm_state9, mmap_BVALID)
    begin
        if ((not(((icmp_ln24_reg_142 = ap_const_lv1_0) and (mmap_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_ap_start <= grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_ap_start_reg;
    icmp_ln24_fu_105_p2 <= "1" when (n = ap_const_lv64_0) else "0";

    mmap_AWADDR_assign_proc : process(ap_CS_fsm_state2, icmp_ln24_reg_142, grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_AWADDR, ap_CS_fsm_state3, ap_CS_fsm_state4, sext_ln24_fu_121_p1, ap_block_state2_io)
    begin
        if (((icmp_ln24_reg_142 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            mmap_AWADDR <= sext_ln24_fu_121_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            mmap_AWADDR <= grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_AWADDR;
        else 
            mmap_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mmap_AWLEN_assign_proc : process(ap_CS_fsm_state2, icmp_ln24_reg_142, grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_AWLEN, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_block_state2_io, trunc_ln24_fu_132_p1)
    begin
        if (((icmp_ln24_reg_142 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            mmap_AWLEN <= trunc_ln24_fu_132_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            mmap_AWLEN <= grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_AWLEN;
        else 
            mmap_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mmap_AWVALID_assign_proc : process(ap_CS_fsm_state2, icmp_ln24_reg_142, grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_AWVALID, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_block_state2_io)
    begin
        if (((icmp_ln24_reg_142 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            mmap_AWVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            mmap_AWVALID <= grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_AWVALID;
        else 
            mmap_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    mmap_BREADY_assign_proc : process(icmp_ln24_reg_142, ap_CS_fsm_state9, grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_BREADY, mmap_BVALID, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((not(((icmp_ln24_reg_142 = ap_const_lv1_0) and (mmap_BVALID = ap_const_logic_0))) and (icmp_ln24_reg_142 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            mmap_BREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            mmap_BREADY <= grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_BREADY;
        else 
            mmap_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    mmap_WVALID_assign_proc : process(grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_WVALID, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            mmap_WVALID <= grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_m_axi_mmap_WVALID;
        else 
            mmap_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    mmap_blk_n_AW_assign_proc : process(m_axi_mmap_AWREADY, ap_CS_fsm_state2, icmp_ln24_reg_142)
    begin
        if (((icmp_ln24_reg_142 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            mmap_blk_n_AW <= m_axi_mmap_AWREADY;
        else 
            mmap_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    mmap_blk_n_B_assign_proc : process(m_axi_mmap_BVALID, icmp_ln24_reg_142, ap_CS_fsm_state9)
    begin
        if (((icmp_ln24_reg_142 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            mmap_blk_n_B <= m_axi_mmap_BVALID;
        else 
            mmap_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;

        sext_ln24_fu_121_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln24_1_fu_111_p4),64));

    stream_peek_read <= ap_const_logic_0;

    stream_s_read_assign_proc : process(grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_stream_s_read, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            stream_s_read <= grp_Stream2Mmap_Pipeline_VITIS_LOOP_24_1_fu_95_stream_s_read;
        else 
            stream_s_read <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln24_1_fu_111_p4 <= mmap_offset(63 downto 2);
    trunc_ln24_fu_132_p1 <= n(32 - 1 downto 0);
end behav;
