-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity krnl_partialKnn_wrapper_12_load is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    flag : IN STD_LOGIC_VECTOR (0 downto 0);
    tile_idx : IN STD_LOGIC_VECTOR (6 downto 0);
    local_SP_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    local_SP_ce0 : OUT STD_LOGIC;
    local_SP_we0 : OUT STD_LOGIC;
    local_SP_d0 : OUT STD_LOGIC_VECTOR (255 downto 0);
    searchSpace_0_read_addr_din : OUT STD_LOGIC_VECTOR (64 downto 0);
    searchSpace_0_read_addr_full_n : IN STD_LOGIC;
    searchSpace_0_read_addr_write : OUT STD_LOGIC;
    searchSpace_0_read_data_s_dout : IN STD_LOGIC_VECTOR (256 downto 0);
    searchSpace_0_read_data_s_empty_n : IN STD_LOGIC;
    searchSpace_0_read_data_s_read : OUT STD_LOGIC );
end;


architecture behav of krnl_partialKnn_wrapper_12_load is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv19_10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_const_boolean_0 : BOOLEAN := false;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add2_fu_73_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add2_reg_84 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_ap_start : STD_LOGIC;
    signal grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_ap_done : STD_LOGIC;
    signal grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_ap_idle : STD_LOGIC;
    signal grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_ap_ready : STD_LOGIC;
    signal grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_searchSpace_0_read_data_s_read : STD_LOGIC;
    signal grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_searchSpace_0_read_addr_din : STD_LOGIC_VECTOR (64 downto 0);
    signal grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_searchSpace_0_read_addr_write : STD_LOGIC;
    signal grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_local_SP_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_local_SP_ce0 : STD_LOGIC;
    signal grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_local_SP_we0 : STD_LOGIC;
    signal grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_local_SP_d0 : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal mul_fu_65_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component krnl_partialKnn_wrapper_12_load_Pipeline_VITIS_LOOP_94_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        searchSpace_0_read_data_s_dout : IN STD_LOGIC_VECTOR (256 downto 0);
        searchSpace_0_read_data_s_empty_n : IN STD_LOGIC;
        searchSpace_0_read_data_s_read : OUT STD_LOGIC;
        zext_ln94 : IN STD_LOGIC_VECTOR (18 downto 0);
        searchSpace_0_read_addr_din : OUT STD_LOGIC_VECTOR (64 downto 0);
        searchSpace_0_read_addr_full_n : IN STD_LOGIC;
        searchSpace_0_read_addr_write : OUT STD_LOGIC;
        local_SP_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        local_SP_ce0 : OUT STD_LOGIC;
        local_SP_we0 : OUT STD_LOGIC;
        local_SP_d0 : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;



begin
    grp_load_Pipeline_VITIS_LOOP_94_1_fu_54 : component krnl_partialKnn_wrapper_12_load_Pipeline_VITIS_LOOP_94_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_ap_start,
        ap_done => grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_ap_done,
        ap_idle => grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_ap_idle,
        ap_ready => grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_ap_ready,
        searchSpace_0_read_data_s_dout => searchSpace_0_read_data_s_dout,
        searchSpace_0_read_data_s_empty_n => searchSpace_0_read_data_s_empty_n,
        searchSpace_0_read_data_s_read => grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_searchSpace_0_read_data_s_read,
        zext_ln94 => add2_reg_84,
        searchSpace_0_read_addr_din => grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_searchSpace_0_read_addr_din,
        searchSpace_0_read_addr_full_n => searchSpace_0_read_addr_full_n,
        searchSpace_0_read_addr_write => grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_searchSpace_0_read_addr_write,
        local_SP_address0 => grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_local_SP_address0,
        local_SP_ce0 => grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_local_SP_ce0,
        local_SP_we0 => grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_local_SP_we0,
        local_SP_d0 => grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_local_SP_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (flag = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_ap_ready = ap_const_logic_1)) then 
                    grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((flag = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    add2_reg_84(18 downto 12) <= add2_fu_73_p2(18 downto 12);
            end if;
        end if;
    end process;
    add2_reg_84(11 downto 0) <= "000000010000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add2_fu_73_p2 <= (mul_fu_65_p3 or ap_const_lv19_10);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state2_on_subcall_done)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state2_on_subcall_done_assign_proc : process(flag, grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_ap_done = ap_const_logic_0) and (flag = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_ap_start <= grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_ap_start_reg;
    local_SP_address0 <= grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_local_SP_address0;
    local_SP_ce0 <= grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_local_SP_ce0;
    local_SP_d0 <= grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_local_SP_d0;
    local_SP_we0 <= grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_local_SP_we0;
    mul_fu_65_p3 <= (tile_idx & ap_const_lv12_0);
    searchSpace_0_read_addr_din <= grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_searchSpace_0_read_addr_din;

    searchSpace_0_read_addr_write_assign_proc : process(flag, grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_searchSpace_0_read_addr_write, ap_CS_fsm_state2)
    begin
        if (((flag = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            searchSpace_0_read_addr_write <= grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_searchSpace_0_read_addr_write;
        else 
            searchSpace_0_read_addr_write <= ap_const_logic_0;
        end if; 
    end process;


    searchSpace_0_read_data_s_read_assign_proc : process(flag, grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_searchSpace_0_read_data_s_read, ap_CS_fsm_state2)
    begin
        if (((flag = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            searchSpace_0_read_data_s_read <= grp_load_Pipeline_VITIS_LOOP_94_1_fu_54_searchSpace_0_read_data_s_read;
        else 
            searchSpace_0_read_data_s_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
