-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Add is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_s_dout : IN STD_LOGIC_VECTOR (32 downto 0);
    a_s_empty_n : IN STD_LOGIC;
    a_s_read : OUT STD_LOGIC;
    a_peek_dout : IN STD_LOGIC_VECTOR (32 downto 0);
    a_peek_empty_n : IN STD_LOGIC;
    a_peek_read : OUT STD_LOGIC;
    b_s_dout : IN STD_LOGIC_VECTOR (32 downto 0);
    b_s_empty_n : IN STD_LOGIC;
    b_s_read : OUT STD_LOGIC;
    b_peek_dout : IN STD_LOGIC_VECTOR (32 downto 0);
    b_peek_empty_n : IN STD_LOGIC;
    b_peek_read : OUT STD_LOGIC;
    c_din : OUT STD_LOGIC_VECTOR (32 downto 0);
    c_full_n : IN STD_LOGIC;
    c_write : OUT STD_LOGIC;
    n : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of Add is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Add_Add,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu55c-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.330000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.342000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=502,HLS_SYN_LUT=414,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_ap_start : STD_LOGIC;
    signal grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_ap_done : STD_LOGIC;
    signal grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_ap_idle : STD_LOGIC;
    signal grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_ap_ready : STD_LOGIC;
    signal grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_a_s_read : STD_LOGIC;
    signal grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_b_s_read : STD_LOGIC;
    signal grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_c_din : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_c_write : STD_LOGIC;
    signal grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_NS_fsm_state2 : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Add_Add_Pipeline_VITIS_LOOP_29_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_s_dout : IN STD_LOGIC_VECTOR (32 downto 0);
        a_s_empty_n : IN STD_LOGIC;
        a_s_read : OUT STD_LOGIC;
        b_s_dout : IN STD_LOGIC_VECTOR (32 downto 0);
        b_s_empty_n : IN STD_LOGIC;
        b_s_read : OUT STD_LOGIC;
        c_din : OUT STD_LOGIC_VECTOR (32 downto 0);
        c_full_n : IN STD_LOGIC;
        c_write : OUT STD_LOGIC;
        n : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88 : component Add_Add_Pipeline_VITIS_LOOP_29_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_ap_start,
        ap_done => grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_ap_done,
        ap_idle => grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_ap_idle,
        ap_ready => grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_ap_ready,
        a_s_dout => a_s_dout,
        a_s_empty_n => a_s_empty_n,
        a_s_read => grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_a_s_read,
        b_s_dout => b_s_dout,
        b_s_empty_n => b_s_empty_n,
        b_s_read => grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_b_s_read,
        c_din => grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_c_din,
        c_full_n => c_full_n,
        c_write => grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_c_write,
        n => n);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_ap_ready = ap_const_logic_1)) then 
                    grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    a_peek_read <= ap_const_logic_0;

    a_s_read_assign_proc : process(grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_a_s_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_s_read <= grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_a_s_read;
        else 
            a_s_read <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_NS_fsm_state2 <= ap_NS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_ap_done)
    begin
        if ((grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_ap_done, ap_CS_fsm_state3)
    begin
        if (((grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_ap_done, ap_CS_fsm_state3)
    begin
        if (((grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    b_peek_read <= ap_const_logic_0;

    b_s_read_assign_proc : process(grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_b_s_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            b_s_read <= grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_b_s_read;
        else 
            b_s_read <= ap_const_logic_0;
        end if; 
    end process;

    c_din <= grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_c_din;

    c_write_assign_proc : process(grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_c_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            c_write <= grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_c_write;
        else 
            c_write <= ap_const_logic_0;
        end if; 
    end process;

    grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_ap_start <= grp_Add_Pipeline_VITIS_LOOP_29_1_fu_88_ap_start_reg;
end behav;
