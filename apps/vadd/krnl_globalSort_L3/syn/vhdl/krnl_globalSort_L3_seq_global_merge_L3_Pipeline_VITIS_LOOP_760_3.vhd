-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity krnl_globalSort_L3_seq_global_merge_L3_Pipeline_VITIS_LOOP_760_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    idx : IN STD_LOGIC_VECTOR (31 downto 0);
    idx_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read14 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read15 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read16 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read17 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read18 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read19 : IN STD_LOGIC_VECTOR (31 downto 0);
    min_idx_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    min_idx_out_ap_vld : OUT STD_LOGIC;
    min_value_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    min_value_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of krnl_globalSort_L3_seq_global_merge_L3_Pipeline_VITIS_LOOP_760_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7F7FFFFD : STD_LOGIC_VECTOR (31 downto 0) := "01111111011111111111111111111101";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln760_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln760_reg_515 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_value_1_fu_352_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_value_1_reg_519 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_value_1_reg_519_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln763_2_fu_362_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln763_2_reg_526 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln763_2_reg_526_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal min_value_load_1_reg_531 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln763_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln763_reg_537 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln763_1_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln763_1_reg_542 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln763_2_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln763_2_reg_547 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln763_3_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln763_3_reg_552 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_value_fu_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_value_2_fu_457_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_min_value_load_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal min_idx_fu_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_idx_4_fu_466_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_idx_1_fu_106 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln760_fu_284_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_j : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_4_fu_290_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_300_p12 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_326_p12 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln763_fu_375_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln763_1_fu_392_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_378_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln763_fu_388_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_7_fu_396_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln763_1_fu_406_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln763_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln763_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln763_1_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln763_1_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln763_fu_463_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component krnl_globalSort_L3_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component krnl_globalSort_L3_mux_22_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_globalSort_L3_mux_1032_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_globalSort_L3_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fcmp_32ns_32ns_1_2_no_dsp_1_U45 : component krnl_globalSort_L3_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => min_value_1_reg_519,
        din1 => ap_sig_allocacmp_min_value_load_1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_256_p2);

    mux_22_32_1_1_U46 : component krnl_globalSort_L3_mux_22_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => idx,
        din1 => idx_1,
        din2 => ap_sig_allocacmp_j,
        dout => tmp_4_fu_290_p4);

    mux_1032_32_1_1_U47 : component krnl_globalSort_L3_mux_1032_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => p_read,
        din1 => p_read1,
        din2 => p_read2,
        din3 => p_read3,
        din4 => p_read4,
        din5 => p_read5,
        din6 => p_read6,
        din7 => p_read7,
        din8 => p_read8,
        din9 => p_read9,
        din10 => tmp_4_fu_290_p4,
        dout => tmp_5_fu_300_p12);

    mux_1032_32_1_1_U48 : component krnl_globalSort_L3_mux_1032_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => p_read10,
        din1 => p_read11,
        din2 => p_read12,
        din3 => p_read13,
        din4 => p_read14,
        din5 => p_read15,
        din6 => p_read16,
        din7 => p_read17,
        din8 => p_read18,
        din9 => p_read19,
        din10 => tmp_4_fu_290_p4,
        dout => tmp_6_fu_326_p12);

    mux_22_32_1_1_U49 : component krnl_globalSort_L3_mux_22_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_5_fu_300_p12,
        din1 => tmp_6_fu_326_p12,
        din2 => ap_sig_allocacmp_j,
        dout => min_value_1_fu_352_p4);

    flow_control_loop_pipe_sequential_init_U : component krnl_globalSort_L3_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    min_idx_1_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln760_fu_278_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    min_idx_1_fu_106 <= add_ln760_fu_284_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    min_idx_1_fu_106 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    min_idx_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    min_idx_fu_102 <= ap_const_lv32_FFFFFFFF;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    min_idx_fu_102 <= min_idx_4_fu_466_p3;
                end if;
            end if; 
        end if;
    end process;

    min_value_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    min_value_fu_98 <= ap_const_lv32_7F7FFFFD;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    min_value_fu_98 <= min_value_2_fu_457_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln760_reg_515 <= icmp_ln760_fu_278_p2;
                icmp_ln763_1_reg_542 <= icmp_ln763_1_fu_416_p2;
                icmp_ln763_2_reg_547 <= icmp_ln763_2_fu_422_p2;
                icmp_ln763_3_reg_552 <= icmp_ln763_3_fu_428_p2;
                icmp_ln763_reg_537 <= icmp_ln763_fu_410_p2;
                min_value_1_reg_519_pp0_iter1_reg <= min_value_1_reg_519;
                min_value_load_1_reg_531 <= ap_sig_allocacmp_min_value_load_1;
                trunc_ln763_2_reg_526_pp0_iter1_reg <= trunc_ln763_2_reg_526;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln760_fu_278_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                min_value_1_reg_519 <= min_value_1_fu_352_p4;
                trunc_ln763_2_reg_526 <= trunc_ln763_2_fu_362_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln760_fu_284_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j) + unsigned(ap_const_lv2_1));
    and_ln763_1_fu_451_p2 <= (or_ln763_1_fu_441_p2 and and_ln763_fu_445_p2);
    and_ln763_fu_445_p2 <= (or_ln763_fu_437_p2 and grp_fu_256_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln760_fu_278_p2)
    begin
        if (((icmp_ln760_fu_278_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, min_idx_1_fu_106)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_j <= min_idx_1_fu_106;
        end if; 
    end process;


    ap_sig_allocacmp_min_value_load_1_assign_proc : process(ap_enable_reg_pp0_iter2, min_value_fu_98, min_value_2_fu_457_p3, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_sig_allocacmp_min_value_load_1 <= min_value_2_fu_457_p3;
        else 
            ap_sig_allocacmp_min_value_load_1 <= min_value_fu_98;
        end if; 
    end process;

    bitcast_ln763_1_fu_392_p1 <= ap_sig_allocacmp_min_value_load_1;
    bitcast_ln763_fu_375_p1 <= min_value_1_reg_519;
    icmp_ln760_fu_278_p2 <= "1" when (ap_sig_allocacmp_j = ap_const_lv2_2) else "0";
    icmp_ln763_1_fu_416_p2 <= "1" when (trunc_ln763_fu_388_p1 = ap_const_lv23_0) else "0";
    icmp_ln763_2_fu_422_p2 <= "0" when (tmp_7_fu_396_p4 = ap_const_lv8_FF) else "1";
    icmp_ln763_3_fu_428_p2 <= "1" when (trunc_ln763_1_fu_406_p1 = ap_const_lv23_0) else "0";
    icmp_ln763_fu_410_p2 <= "0" when (tmp_3_fu_378_p4 = ap_const_lv8_FF) else "1";
    min_idx_4_fu_466_p3 <= 
        zext_ln763_fu_463_p1 when (and_ln763_1_fu_451_p2(0) = '1') else 
        min_idx_fu_102;
    min_idx_out <= min_idx_fu_102;

    min_idx_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln760_reg_515)
    begin
        if (((icmp_ln760_reg_515 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            min_idx_out_ap_vld <= ap_const_logic_1;
        else 
            min_idx_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    min_value_2_fu_457_p3 <= 
        min_value_1_reg_519_pp0_iter1_reg when (and_ln763_1_fu_451_p2(0) = '1') else 
        min_value_load_1_reg_531;
    min_value_out <= min_value_fu_98;

    min_value_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln760_reg_515)
    begin
        if (((icmp_ln760_reg_515 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            min_value_out_ap_vld <= ap_const_logic_1;
        else 
            min_value_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    or_ln763_1_fu_441_p2 <= (icmp_ln763_3_reg_552 or icmp_ln763_2_reg_547);
    or_ln763_fu_437_p2 <= (icmp_ln763_reg_537 or icmp_ln763_1_reg_542);
    tmp_3_fu_378_p4 <= bitcast_ln763_fu_375_p1(30 downto 23);
    tmp_7_fu_396_p4 <= bitcast_ln763_1_fu_392_p1(30 downto 23);
    trunc_ln763_1_fu_406_p1 <= bitcast_ln763_1_fu_392_p1(23 - 1 downto 0);
    trunc_ln763_2_fu_362_p1 <= ap_sig_allocacmp_j(1 - 1 downto 0);
    trunc_ln763_fu_388_p1 <= bitcast_ln763_fu_375_p1(23 - 1 downto 0);
    zext_ln763_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln763_2_reg_526_pp0_iter1_reg),32));
end behav;
