-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity krnl_globalSort_L3_krnl_globalSort_L3_Pipeline_VITIS_LOOP_895_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_knnId_write_resp_s_dout : IN STD_LOGIC_VECTOR (8 downto 0);
    output_knnId_write_resp_s_empty_n : IN STD_LOGIC;
    output_knnId_write_resp_s_read : OUT STD_LOGIC;
    output_knnDist_write_resp_s_dout : IN STD_LOGIC_VECTOR (8 downto 0);
    output_knnDist_write_resp_s_empty_n : IN STD_LOGIC;
    output_knnDist_write_resp_s_read : OUT STD_LOGIC;
    output_knnDist_write_addr_din : OUT STD_LOGIC_VECTOR (64 downto 0);
    output_knnDist_write_addr_full_n : IN STD_LOGIC;
    output_knnDist_write_addr_write : OUT STD_LOGIC;
    output_knnDist_write_data_din : OUT STD_LOGIC_VECTOR (32 downto 0);
    output_knnDist_write_data_full_n : IN STD_LOGIC;
    output_knnDist_write_data_write : OUT STD_LOGIC;
    output_dist : IN STD_LOGIC_VECTOR (31 downto 0);
    output_dist_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_dist_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_dist_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_dist_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_dist_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_dist_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_dist_7 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_dist_8 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_dist_9 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_knnId_write_addr_din : OUT STD_LOGIC_VECTOR (64 downto 0);
    output_knnId_write_addr_full_n : IN STD_LOGIC;
    output_knnId_write_addr_write : OUT STD_LOGIC;
    output_knnId_write_data_din : OUT STD_LOGIC_VECTOR (32 downto 0);
    output_knnId_write_data_full_n : IN STD_LOGIC;
    output_knnId_write_data_write : OUT STD_LOGIC;
    output_id : IN STD_LOGIC_VECTOR (31 downto 0);
    output_id_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_id_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_id_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_id_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_id_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_id_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_id_7 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_id_8 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_id_9 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of krnl_globalSort_L3_krnl_globalSort_L3_Pipeline_VITIS_LOOP_895_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal or_ln895_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_req_id_fu_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_req_id_1_fu_514_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln914_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_nbwritereq_fu_278_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_nbwritereq_fu_286_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_req_dist_fu_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_req_dist_1_fu_420_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln899_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_nbwritereq_fu_234_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_nbwritereq_fu_242_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_resp_id_fu_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_resp_id_2_fu_547_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_nbreadreq_fu_308_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_resp_dist_fu_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_resp_dist_2_fu_453_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_nbreadreq_fu_264_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln895_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_1_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln_fu_378_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_s_fu_391_p12 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln185_fu_407_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal elem_val_fu_435_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln910_fu_439_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln910_fu_443_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln910_1_fu_449_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln185_1_fu_476_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_1_fu_489_p12 : STD_LOGIC_VECTOR (31 downto 0);
    signal elem_val_1_fu_529_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln925_fu_533_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln925_fu_537_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln925_1_fu_543_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_388 : BOOLEAN;
    signal ap_condition_393 : BOOLEAN;
    signal ap_condition_396 : BOOLEAN;
    signal ap_condition_399 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component krnl_globalSort_L3_mux_1032_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_globalSort_L3_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_1032_32_1_1_U122 : component krnl_globalSort_L3_mux_1032_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => output_dist,
        din1 => output_dist_1,
        din2 => output_dist_2,
        din3 => output_dist_3,
        din4 => output_dist_4,
        din5 => output_dist_5,
        din6 => output_dist_6,
        din7 => output_dist_7,
        din8 => output_dist_8,
        din9 => output_dist_9,
        din10 => i_req_dist_fu_102,
        dout => tmp_s_fu_391_p12);

    mux_1032_32_1_1_U123 : component krnl_globalSort_L3_mux_1032_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => output_id,
        din1 => output_id_1,
        din2 => output_id_2,
        din3 => output_id_3,
        din4 => output_id_4,
        din5 => output_id_5,
        din6 => output_id_6,
        din7 => output_id_7,
        din8 => output_id_8,
        din9 => output_id_9,
        din10 => i_req_id_fu_98,
        dout => tmp_1_fu_489_p12);

    flow_control_loop_pipe_sequential_init_U : component krnl_globalSort_L3_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_req_dist_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_req_dist_fu_102 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_388)) then 
                    i_req_dist_fu_102 <= i_req_dist_1_fu_420_p2;
                end if;
            end if; 
        end if;
    end process;

    i_req_id_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_req_id_fu_98 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_393)) then 
                    i_req_id_fu_98 <= i_req_id_1_fu_514_p2;
                end if;
            end if; 
        end if;
    end process;

    i_resp_dist_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_resp_dist_fu_110 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_396)) then 
                    i_resp_dist_fu_110 <= i_resp_dist_2_fu_453_p2;
                end if;
            end if; 
        end if;
    end process;

    i_resp_id_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_resp_id_fu_106 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_399)) then 
                    i_resp_id_fu_106 <= i_resp_id_2_fu_547_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln910_fu_443_p2 <= std_logic_vector(unsigned(zext_ln910_fu_439_p1) + unsigned(ap_const_lv9_1));
    add_ln925_fu_537_p2 <= std_logic_vector(unsigned(zext_ln925_fu_533_p1) + unsigned(ap_const_lv9_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_388_assign_proc : process(ap_enable_reg_pp0_iter1, or_ln895_fu_360_p2, icmp_ln899_fu_369_p2, tmp_nbwritereq_fu_234_p3, tmp_8_nbwritereq_fu_242_p3)
    begin
                ap_condition_388 <= ((or_ln895_fu_360_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_8_nbwritereq_fu_242_p3 = ap_const_lv1_1) and (tmp_nbwritereq_fu_234_p3 = ap_const_lv1_1) and (icmp_ln899_fu_369_p2 = ap_const_lv1_1));
    end process;


    ap_condition_393_assign_proc : process(ap_enable_reg_pp0_iter1, or_ln895_fu_360_p2, icmp_ln914_fu_467_p2, tmp_5_nbwritereq_fu_278_p3, tmp_6_nbwritereq_fu_286_p3)
    begin
                ap_condition_393 <= ((or_ln895_fu_360_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_6_nbwritereq_fu_286_p3 = ap_const_lv1_1) and (tmp_5_nbwritereq_fu_278_p3 = ap_const_lv1_1) and (icmp_ln914_fu_467_p2 = ap_const_lv1_1));
    end process;


    ap_condition_396_assign_proc : process(ap_enable_reg_pp0_iter1, or_ln895_fu_360_p2, tmp_3_nbreadreq_fu_264_p3)
    begin
                ap_condition_396 <= ((or_ln895_fu_360_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_3_nbreadreq_fu_264_p3 = ap_const_lv1_1));
    end process;


    ap_condition_399_assign_proc : process(ap_enable_reg_pp0_iter1, or_ln895_fu_360_p2, tmp_7_nbreadreq_fu_308_p3)
    begin
                ap_condition_399 <= ((or_ln895_fu_360_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_7_nbreadreq_fu_308_p3 = ap_const_lv1_1));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, or_ln895_fu_360_p2)
    begin
        if (((or_ln895_fu_360_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln185_fu_407_p1 <= tmp_s_fu_391_p12;
    elem_val_1_fu_529_p1 <= output_knnId_write_resp_s_dout(8 - 1 downto 0);
    elem_val_fu_435_p1 <= output_knnDist_write_resp_s_dout(8 - 1 downto 0);
    i_req_dist_1_fu_420_p2 <= std_logic_vector(unsigned(i_req_dist_fu_102) + unsigned(ap_const_lv32_1));
    i_req_id_1_fu_514_p2 <= std_logic_vector(unsigned(i_req_id_fu_98) + unsigned(ap_const_lv32_1));
    i_resp_dist_2_fu_453_p2 <= std_logic_vector(unsigned(zext_ln910_1_fu_449_p1) + unsigned(i_resp_dist_fu_110));
    i_resp_id_2_fu_547_p2 <= std_logic_vector(unsigned(zext_ln925_1_fu_543_p1) + unsigned(i_resp_id_fu_106));
    icmp_ln895_1_fu_354_p2 <= "1" when (unsigned(i_resp_id_fu_106) < unsigned(ap_const_lv32_A)) else "0";
    icmp_ln895_fu_348_p2 <= "1" when (unsigned(i_resp_dist_fu_110) < unsigned(ap_const_lv32_A)) else "0";
    icmp_ln899_fu_369_p2 <= "1" when (unsigned(i_req_dist_fu_102) < unsigned(ap_const_lv32_A)) else "0";
    icmp_ln914_fu_467_p2 <= "1" when (unsigned(i_req_id_fu_98) < unsigned(ap_const_lv32_A)) else "0";
    or_ln185_1_fu_476_p3 <= (ap_const_lv1_0 & i_req_id_fu_98);
    or_ln895_fu_360_p2 <= (icmp_ln895_fu_348_p2 or icmp_ln895_1_fu_354_p2);
    or_ln_fu_378_p3 <= (ap_const_lv1_0 & i_req_dist_fu_102);
    output_knnDist_write_addr_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_378_p3),65));

    output_knnDist_write_addr_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_ln895_fu_360_p2, output_knnDist_write_addr_full_n, ap_block_pp0_stage0_11001, icmp_ln899_fu_369_p2, tmp_nbwritereq_fu_234_p3, tmp_8_nbwritereq_fu_242_p3)
    begin
        if (((output_knnDist_write_addr_full_n = ap_const_logic_1) and (or_ln895_fu_360_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_8_nbwritereq_fu_242_p3 = ap_const_lv1_1) and (tmp_nbwritereq_fu_234_p3 = ap_const_lv1_1) and (icmp_ln899_fu_369_p2 = ap_const_lv1_1))) then 
            output_knnDist_write_addr_write <= ap_const_logic_1;
        else 
            output_knnDist_write_addr_write <= ap_const_logic_0;
        end if; 
    end process;

    output_knnDist_write_data_din <= (ap_const_lv1_0 & bitcast_ln185_fu_407_p1);

    output_knnDist_write_data_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_ln895_fu_360_p2, output_knnDist_write_data_full_n, ap_block_pp0_stage0_11001, icmp_ln899_fu_369_p2, tmp_nbwritereq_fu_234_p3, tmp_8_nbwritereq_fu_242_p3)
    begin
        if (((output_knnDist_write_data_full_n = ap_const_logic_1) and (or_ln895_fu_360_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_8_nbwritereq_fu_242_p3 = ap_const_lv1_1) and (tmp_nbwritereq_fu_234_p3 = ap_const_lv1_1) and (icmp_ln899_fu_369_p2 = ap_const_lv1_1))) then 
            output_knnDist_write_data_write <= ap_const_logic_1;
        else 
            output_knnDist_write_data_write <= ap_const_logic_0;
        end if; 
    end process;


    output_knnDist_write_resp_s_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_ln895_fu_360_p2, output_knnDist_write_resp_s_empty_n, ap_block_pp0_stage0_11001, tmp_3_nbreadreq_fu_264_p3)
    begin
        if (((output_knnDist_write_resp_s_empty_n = ap_const_logic_1) and (or_ln895_fu_360_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_3_nbreadreq_fu_264_p3 = ap_const_lv1_1))) then 
            output_knnDist_write_resp_s_read <= ap_const_logic_1;
        else 
            output_knnDist_write_resp_s_read <= ap_const_logic_0;
        end if; 
    end process;

    output_knnId_write_addr_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln185_1_fu_476_p3),65));

    output_knnId_write_addr_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_ln895_fu_360_p2, output_knnId_write_addr_full_n, ap_block_pp0_stage0_11001, icmp_ln914_fu_467_p2, tmp_5_nbwritereq_fu_278_p3, tmp_6_nbwritereq_fu_286_p3)
    begin
        if (((output_knnId_write_addr_full_n = ap_const_logic_1) and (or_ln895_fu_360_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_6_nbwritereq_fu_286_p3 = ap_const_lv1_1) and (tmp_5_nbwritereq_fu_278_p3 = ap_const_lv1_1) and (icmp_ln914_fu_467_p2 = ap_const_lv1_1))) then 
            output_knnId_write_addr_write <= ap_const_logic_1;
        else 
            output_knnId_write_addr_write <= ap_const_logic_0;
        end if; 
    end process;

    output_knnId_write_data_din <= (ap_const_lv1_0 & tmp_1_fu_489_p12);

    output_knnId_write_data_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_ln895_fu_360_p2, output_knnId_write_data_full_n, ap_block_pp0_stage0_11001, icmp_ln914_fu_467_p2, tmp_5_nbwritereq_fu_278_p3, tmp_6_nbwritereq_fu_286_p3)
    begin
        if (((output_knnId_write_data_full_n = ap_const_logic_1) and (or_ln895_fu_360_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_6_nbwritereq_fu_286_p3 = ap_const_lv1_1) and (tmp_5_nbwritereq_fu_278_p3 = ap_const_lv1_1) and (icmp_ln914_fu_467_p2 = ap_const_lv1_1))) then 
            output_knnId_write_data_write <= ap_const_logic_1;
        else 
            output_knnId_write_data_write <= ap_const_logic_0;
        end if; 
    end process;


    output_knnId_write_resp_s_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_ln895_fu_360_p2, output_knnId_write_resp_s_empty_n, ap_block_pp0_stage0_11001, tmp_7_nbreadreq_fu_308_p3)
    begin
        if (((output_knnId_write_resp_s_empty_n = ap_const_logic_1) and (or_ln895_fu_360_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_7_nbreadreq_fu_308_p3 = ap_const_lv1_1))) then 
            output_knnId_write_resp_s_read <= ap_const_logic_1;
        else 
            output_knnId_write_resp_s_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_3_nbreadreq_fu_264_p3 <= (0=>(output_knnDist_write_resp_s_empty_n), others=>'-');
    tmp_5_nbwritereq_fu_278_p3 <= (0=>output_knnId_write_addr_full_n, others=>'-');
    tmp_6_nbwritereq_fu_286_p3 <= (0=>output_knnId_write_data_full_n, others=>'-');
    tmp_7_nbreadreq_fu_308_p3 <= (0=>(output_knnId_write_resp_s_empty_n), others=>'-');
    tmp_8_nbwritereq_fu_242_p3 <= (0=>output_knnDist_write_data_full_n, others=>'-');
    tmp_nbwritereq_fu_234_p3 <= (0=>output_knnDist_write_addr_full_n, others=>'-');
    zext_ln910_1_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln910_fu_443_p2),32));
    zext_ln910_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(elem_val_fu_435_p1),9));
    zext_ln925_1_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln925_fu_537_p2),32));
    zext_ln925_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(elem_val_1_fu_529_p1),9));
end behav;
