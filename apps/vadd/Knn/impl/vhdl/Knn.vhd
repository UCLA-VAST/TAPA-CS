-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Knn is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC );
end;


architecture behav of Knn is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Knn_Knn,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu55c-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.330000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.000000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1436,HLS_SYN_LUT=2600,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal in_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal in_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal in_2 : STD_LOGIC_VECTOR (63 downto 0);
    signal in_3 : STD_LOGIC_VECTOR (63 downto 0);
    signal in_4 : STD_LOGIC_VECTOR (63 downto 0);
    signal in_5 : STD_LOGIC_VECTOR (63 downto 0);
    signal in_6 : STD_LOGIC_VECTOR (63 downto 0);
    signal in_7 : STD_LOGIC_VECTOR (63 downto 0);
    signal in_8 : STD_LOGIC_VECTOR (63 downto 0);
    signal in_9 : STD_LOGIC_VECTOR (63 downto 0);
    signal in_10 : STD_LOGIC_VECTOR (63 downto 0);
    signal in_11 : STD_LOGIC_VECTOR (63 downto 0);
    signal in_12 : STD_LOGIC_VECTOR (63 downto 0);
    signal in_13 : STD_LOGIC_VECTOR (63 downto 0);
    signal in_14 : STD_LOGIC_VECTOR (63 downto 0);
    signal in_15 : STD_LOGIC_VECTOR (63 downto 0);
    signal in_16 : STD_LOGIC_VECTOR (63 downto 0);
    signal in_17 : STD_LOGIC_VECTOR (63 downto 0);
    signal L3_out_dist : STD_LOGIC_VECTOR (63 downto 0);
    signal L3_out_id : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_rst_n_inv : STD_LOGIC;

    component Knn_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        in_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        in_1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        in_2 : OUT STD_LOGIC_VECTOR (63 downto 0);
        in_3 : OUT STD_LOGIC_VECTOR (63 downto 0);
        in_4 : OUT STD_LOGIC_VECTOR (63 downto 0);
        in_5 : OUT STD_LOGIC_VECTOR (63 downto 0);
        in_6 : OUT STD_LOGIC_VECTOR (63 downto 0);
        in_7 : OUT STD_LOGIC_VECTOR (63 downto 0);
        in_8 : OUT STD_LOGIC_VECTOR (63 downto 0);
        in_9 : OUT STD_LOGIC_VECTOR (63 downto 0);
        in_10 : OUT STD_LOGIC_VECTOR (63 downto 0);
        in_11 : OUT STD_LOGIC_VECTOR (63 downto 0);
        in_12 : OUT STD_LOGIC_VECTOR (63 downto 0);
        in_13 : OUT STD_LOGIC_VECTOR (63 downto 0);
        in_14 : OUT STD_LOGIC_VECTOR (63 downto 0);
        in_15 : OUT STD_LOGIC_VECTOR (63 downto 0);
        in_16 : OUT STD_LOGIC_VECTOR (63 downto 0);
        in_17 : OUT STD_LOGIC_VECTOR (63 downto 0);
        L3_out_dist : OUT STD_LOGIC_VECTOR (63 downto 0);
        L3_out_id : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    control_s_axi_U : component Knn_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        in_0 => in_0,
        in_1 => in_1,
        in_2 => in_2,
        in_3 => in_3,
        in_4 => in_4,
        in_5 => in_5,
        in_6 => in_6,
        in_7 => in_7,
        in_8 => in_8,
        in_9 => in_9,
        in_10 => in_10,
        in_11 => in_11,
        in_12 => in_12,
        in_13 => in_13,
        in_14 => in_14,
        in_15 => in_15,
        in_16 => in_16,
        in_17 => in_17,
        L3_out_dist => L3_out_dist,
        L3_out_id => L3_out_id,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);




    ap_done <= ap_start;
    ap_idle <= ap_const_logic_1;
    ap_ready <= ap_start;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

end behav;
