-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity krnl_partialKnn_wrapper_5_krnl_partialKnn_wrapper_5_Pipeline_LOAD_QUERY is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    searchSpace_0_read_data_s_dout : IN STD_LOGIC_VECTOR (256 downto 0);
    searchSpace_0_read_data_s_empty_n : IN STD_LOGIC;
    searchSpace_0_read_data_s_read : OUT STD_LOGIC;
    searchSpace_0_read_addr_din : OUT STD_LOGIC_VECTOR (64 downto 0);
    searchSpace_0_read_addr_full_n : IN STD_LOGIC;
    searchSpace_0_read_addr_write : OUT STD_LOGIC;
    local_Query_0_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    local_Query_0_1_out_ap_vld : OUT STD_LOGIC;
    local_Query_0_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    local_Query_0_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of krnl_partialKnn_wrapper_5_krnl_partialKnn_wrapper_5_Pipeline_LOAD_QUERY is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln396_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal i_resp_4_reg_407 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln396_fu_124_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln396_reg_413 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_nbreadreq_fu_76_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_421 : STD_LOGIC_VECTOR (0 downto 0);
    signal searchSpace_0_read_data_s_read_reg_425_1 : STD_LOGIC_VECTOR (256 downto 0);
    signal sub_ln407_fu_144_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln407_reg_430 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_req_fu_60 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln400_fu_255_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln400_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_resp_fu_64 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_resp_5_fu_150_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_i_resp_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal local_Query_0_fu_68 : STD_LOGIC_VECTOR (31 downto 0);
    signal local_Query_0_3_fu_353_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal local_Query_0_1_fu_72 : STD_LOGIC_VECTOR (31 downto 0);
    signal local_Query_0_2_fu_345_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_fu_128_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln399_fu_172_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln399_1_fu_178_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln399_fu_188_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln399_2_fu_198_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_5_fu_164_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln399_1_fu_192_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln399_1_fu_208_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_8_fu_220_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal input_rd_idx_fu_212_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln400_fu_236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln400_fu_255_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln401_fu_249_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_and_t_fu_288_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln407_fu_295_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln407_1_fu_299_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_fu_281_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln407_fu_305_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln407_fu_309_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_10_fu_316_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal elem_val_V_fu_277_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal zext_ln674_fu_324_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal lshr_ln674_fu_328_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_11_fu_334_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln412_fu_342_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln412_fu_338_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_311 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component krnl_partialKnn_wrapper_5_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component krnl_partialKnn_wrapper_5_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_req_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_req_fu_60 <= ap_const_lv32_0;
                elsif (((icmp_ln400_fu_230_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_req_fu_60 <= select_ln400_fu_255_p3;
                end if;
            end if; 
        end if;
    end process;

    i_resp_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_const_boolean_1 = ap_condition_311)) then 
                    i_resp_fu_64 <= i_resp_5_fu_150_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_resp_fu_64 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_resp_4_reg_407 <= ap_sig_allocacmp_i_resp_4;
                trunc_ln396_reg_413 <= trunc_ln396_fu_124_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_reg_421 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                local_Query_0_1_fu_72 <= local_Query_0_2_fu_345_p3;
                local_Query_0_fu_68 <= local_Query_0_3_fu_353_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_nbreadreq_fu_76_p3 = ap_const_lv1_1) and (icmp_ln396_fu_138_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                searchSpace_0_read_data_s_read_reg_425_1 <= searchSpace_0_read_data_s_dout;
                sub_ln407_reg_430 <= sub_ln407_fu_144_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln396_fu_138_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_7_reg_421 <= tmp_7_nbreadreq_fu_76_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln401_fu_249_p2 <= std_logic_vector(unsigned(i_req_fu_60) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_311_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln396_fu_138_p2, tmp_7_nbreadreq_fu_76_p3)
    begin
                ap_condition_311 <= ((tmp_7_nbreadreq_fu_76_p3 = ap_const_lv1_1) and (icmp_ln396_fu_138_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln396_fu_138_p2)
    begin
        if (((icmp_ln396_fu_138_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_resp_4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_block_pp0_stage0, i_resp_fu_64)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_resp_4 <= ap_const_lv32_0;
        else 
            ap_sig_allocacmp_i_resp_4 <= i_resp_fu_64;
        end if; 
    end process;

    bitcast_ln412_fu_338_p1 <= tmp_11_fu_334_p1;
    elem_val_V_fu_277_p1 <= searchSpace_0_read_data_s_read_reg_425_1(256 - 1 downto 0);
    i_resp_5_fu_150_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_resp_4) + unsigned(ap_const_lv32_1));
    icmp_ln396_fu_138_p2 <= "1" when (signed(tmp_fu_128_p4) < signed(ap_const_lv31_1)) else "0";
    icmp_ln400_fu_230_p2 <= "1" when (signed(tmp_8_fu_220_p4) < signed(ap_const_lv31_1)) else "0";
    input_rd_idx_fu_212_p3 <= 
        sub_ln399_1_fu_192_p2 when (tmp_5_fu_164_p3(0) = '1') else 
        zext_ln399_1_fu_208_p1;
    local_Query_0_1_out <= local_Query_0_1_fu_72;

    local_Query_0_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln396_fu_138_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln396_fu_138_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_Query_0_1_out_ap_vld <= ap_const_logic_1;
        else 
            local_Query_0_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    local_Query_0_2_fu_345_p3 <= 
        local_Query_0_1_fu_72 when (trunc_ln412_fu_342_p1(0) = '1') else 
        bitcast_ln412_fu_338_p1;
    local_Query_0_3_fu_353_p3 <= 
        bitcast_ln412_fu_338_p1 when (trunc_ln412_fu_342_p1(0) = '1') else 
        local_Query_0_fu_68;
    local_Query_0_out <= local_Query_0_fu_68;

    local_Query_0_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln396_fu_138_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln396_fu_138_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_Query_0_out_ap_vld <= ap_const_logic_1;
        else 
            local_Query_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln674_fu_328_p2 <= std_logic_vector(shift_right(unsigned(elem_val_V_fu_277_p1),to_integer(unsigned('0' & zext_ln674_fu_324_p1(31-1 downto 0)))));
    p_and_t_fu_288_p3 <= (ap_const_lv1_0 & sub_ln407_reg_430);
    searchSpace_0_read_addr_din <= (ap_const_lv1_0 & sext_ln400_fu_236_p1);

    searchSpace_0_read_addr_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, searchSpace_0_read_addr_full_n, ap_block_pp0_stage0_11001, icmp_ln400_fu_230_p2)
    begin
        if (((icmp_ln400_fu_230_p2 = ap_const_lv1_1) and (searchSpace_0_read_addr_full_n = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            searchSpace_0_read_addr_write <= ap_const_logic_1;
        else 
            searchSpace_0_read_addr_write <= ap_const_logic_0;
        end if; 
    end process;


    searchSpace_0_read_data_s_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln396_fu_138_p2, searchSpace_0_read_data_s_empty_n, ap_block_pp0_stage0_11001, tmp_7_nbreadreq_fu_76_p3)
    begin
        if (((tmp_7_nbreadreq_fu_76_p3 = ap_const_lv1_1) and (searchSpace_0_read_data_s_empty_n = ap_const_logic_1) and (icmp_ln396_fu_138_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            searchSpace_0_read_data_s_read <= ap_const_logic_1;
        else 
            searchSpace_0_read_data_s_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln400_fu_255_p0 <= (0=>searchSpace_0_read_addr_full_n, others=>'-');
    select_ln400_fu_255_p3 <= 
        add_ln401_fu_249_p2 when (select_ln400_fu_255_p0(0) = '1') else 
        i_req_fu_60;
    select_ln407_fu_309_p3 <= 
        trunc_ln407_fu_305_p1 when (tmp_9_fu_281_p3(0) = '1') else 
        trunc_ln396_reg_413;
        sext_ln400_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_rd_idx_fu_212_p3),64));

    sub_ln399_1_fu_192_p2 <= std_logic_vector(unsigned(ap_const_lv30_0) - unsigned(zext_ln399_fu_188_p1));
    sub_ln399_fu_172_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(i_req_fu_60));
    sub_ln407_1_fu_299_p2 <= std_logic_vector(unsigned(ap_const_lv5_0) - unsigned(zext_ln407_fu_295_p1));
    sub_ln407_fu_144_p2 <= std_logic_vector(unsigned(ap_const_lv3_0) - unsigned(trunc_ln396_fu_124_p1));
    tmp_10_fu_316_p3 <= (select_ln407_fu_309_p3 & ap_const_lv5_0);
    tmp_11_fu_334_p1 <= lshr_ln674_fu_328_p2(32 - 1 downto 0);
    tmp_5_fu_164_p3 <= i_req_fu_60(31 downto 31);
    tmp_7_nbreadreq_fu_76_p3 <= (0=>(searchSpace_0_read_data_s_empty_n), others=>'-');
    tmp_8_fu_220_p4 <= i_req_fu_60(31 downto 1);
    tmp_9_fu_281_p3 <= i_resp_4_reg_407(31 downto 31);
    tmp_fu_128_p4 <= ap_sig_allocacmp_i_resp_4(31 downto 1);
    trunc_ln396_fu_124_p1 <= ap_sig_allocacmp_i_resp_4(3 - 1 downto 0);
    trunc_ln399_1_fu_178_p4 <= sub_ln399_fu_172_p2(31 downto 3);
    trunc_ln399_2_fu_198_p4 <= i_req_fu_60(31 downto 3);
    trunc_ln407_fu_305_p1 <= sub_ln407_1_fu_299_p2(3 - 1 downto 0);
    trunc_ln412_fu_342_p1 <= i_resp_4_reg_407(1 - 1 downto 0);
    zext_ln399_1_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln399_2_fu_198_p4),30));
    zext_ln399_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln399_1_fu_178_p4),30));
    zext_ln407_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_and_t_fu_288_p3),5));
    zext_ln674_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_316_p3),256));
end behav;
