// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module krnl_partialKnn_wrapper_5_compare_with_register (
        ap_clk,
        ap_rst,
        in_1,
        in_2,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [31:0] in_1;
input  [31:0] in_2;
output  [0:0] ap_return;
input   ap_ce;

reg[0:0] ap_return;

wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln83_fu_82_p2;
reg   [0:0] icmp_ln83_reg_136;
wire   [0:0] icmp_ln83_1_fu_88_p2;
reg   [0:0] icmp_ln83_1_reg_141;
wire   [0:0] icmp_ln83_2_fu_94_p2;
reg   [0:0] icmp_ln83_2_reg_146;
wire   [0:0] icmp_ln83_3_fu_100_p2;
reg   [0:0] icmp_ln83_3_reg_151;
wire   [0:0] and_ln83_1_fu_120_p2;
reg   [0:0] and_ln83_1_reg_156;
wire    ap_block_pp0_stage0;
wire   [31:0] bitcast_ln83_fu_46_p1;
wire   [31:0] bitcast_ln83_1_fu_64_p1;
wire   [7:0] tmp_fu_50_p4;
wire   [22:0] trunc_ln83_fu_60_p1;
wire   [7:0] tmp_s_fu_68_p4;
wire   [22:0] trunc_ln83_1_fu_78_p1;
wire   [0:0] or_ln83_fu_106_p2;
wire   [0:0] or_ln83_1_fu_110_p2;
wire   [0:0] and_ln83_fu_114_p2;
wire   [0:0] grp_fu_40_p2;
reg    grp_fu_40_ce;
wire    ap_block_pp0_stage0_00001;
reg    ap_ce_reg;
reg   [31:0] in_1_int_reg;
reg   [31:0] in_2_int_reg;
reg   [0:0] ap_return_int_reg;

krnl_partialKnn_wrapper_5_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U361(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_1_int_reg),
    .din1(in_2_int_reg),
    .ce(grp_fu_40_ce),
    .opcode(5'd4),
    .dout(grp_fu_40_p2)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        and_ln83_1_reg_156 <= and_ln83_1_fu_120_p2;
        icmp_ln83_1_reg_141 <= icmp_ln83_1_fu_88_p2;
        icmp_ln83_2_reg_146 <= icmp_ln83_2_fu_94_p2;
        icmp_ln83_3_reg_151 <= icmp_ln83_3_fu_100_p2;
        icmp_ln83_reg_136 <= icmp_ln83_fu_82_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= and_ln83_1_reg_156;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        in_1_int_reg <= in_1;
        in_2_int_reg <= in_2;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = and_ln83_1_reg_156;
    end else begin
        ap_return = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_40_ce = 1'b1;
    end else begin
        grp_fu_40_ce = 1'b0;
    end
end

assign and_ln83_1_fu_120_p2 = (grp_fu_40_p2 & and_ln83_fu_114_p2);

assign and_ln83_fu_114_p2 = (or_ln83_fu_106_p2 & or_ln83_1_fu_110_p2);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign bitcast_ln83_1_fu_64_p1 = in_2_int_reg;

assign bitcast_ln83_fu_46_p1 = in_1_int_reg;

assign icmp_ln83_1_fu_88_p2 = ((trunc_ln83_fu_60_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln83_2_fu_94_p2 = ((tmp_s_fu_68_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln83_3_fu_100_p2 = ((trunc_ln83_1_fu_78_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_82_p2 = ((tmp_fu_50_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln83_1_fu_110_p2 = (icmp_ln83_3_reg_151 | icmp_ln83_2_reg_146);

assign or_ln83_fu_106_p2 = (icmp_ln83_reg_136 | icmp_ln83_1_reg_141);

assign tmp_fu_50_p4 = {{bitcast_ln83_fu_46_p1[30:23]}};

assign tmp_s_fu_68_p4 = {{bitcast_ln83_1_fu_64_p1[30:23]}};

assign trunc_ln83_1_fu_78_p1 = bitcast_ln83_1_fu_64_p1[22:0];

assign trunc_ln83_fu_60_p1 = bitcast_ln83_fu_46_p1[22:0];

endmodule //krnl_partialKnn_wrapper_5_compare_with_register
