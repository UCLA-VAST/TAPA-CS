-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity krnl_partialKnn_wrapper_5_merge_dual_all_PEs is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    local_kNearstDist_partial_a_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    local_kNearstDist_partial_a_ce0 : OUT STD_LOGIC;
    local_kNearstDist_partial_a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_kNearstDist_partial_b_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    local_kNearstDist_partial_b_ce0 : OUT STD_LOGIC;
    local_kNearstDist_partial_b_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_kNearstId_partial_a_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    local_kNearstId_partial_a_ce0 : OUT STD_LOGIC;
    local_kNearstId_partial_a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_kNearstId_partial_b_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    local_kNearstId_partial_b_ce0 : OUT STD_LOGIC;
    local_kNearstId_partial_b_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dist_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dist_ce0 : OUT STD_LOGIC;
    dist_we0 : OUT STD_LOGIC;
    dist_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    id_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    id_ce0 : OUT STD_LOGIC;
    id_we0 : OUT STD_LOGIC;
    id_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of krnl_partialKnn_wrapper_5_merge_dual_all_PEs is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal tmp_3_fu_176_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_2_reg_339 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal i_2_reg_339_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_reg_344 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx_a_load_reg_348 : STD_LOGIC_VECTOR (31 downto 0);
    signal idx_b_load_reg_353 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln321_fu_190_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_reg_358 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_1_fu_195_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_1_reg_368 : STD_LOGIC_VECTOR (63 downto 0);
    signal local_kNearstDist_partial_a_load_reg_378 : STD_LOGIC_VECTOR (31 downto 0);
    signal local_kNearstDist_partial_b_load_reg_385 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln321_1_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln321_1_reg_392 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal i_cast_fu_313_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_60 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln319_fu_200_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal idx_a_fu_64 : STD_LOGIC_VECTOR (31 downto 0);
    signal idx_a_1_fu_303_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_idx_a_load : STD_LOGIC_VECTOR (31 downto 0);
    signal idx_b_fu_68 : STD_LOGIC_VECTOR (31 downto 0);
    signal idx_b_1_fu_293_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_idx_b_load : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln321_fu_211_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln321_1_fu_228_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_214_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln321_fu_224_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln321_1_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln321_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_231_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln321_1_fu_241_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln321_3_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln321_2_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln321_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln321_1_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln321_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_162 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component krnl_partialKnn_wrapper_5_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component krnl_partialKnn_wrapper_5_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fcmp_32ns_32ns_1_2_no_dsp_1_U601 : component krnl_partialKnn_wrapper_5_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => local_kNearstDist_partial_a_q0,
        din1 => local_kNearstDist_partial_b_q0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_152_p2);

    flow_control_loop_pipe_sequential_init_U : component krnl_partialKnn_wrapper_5_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    i_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                i_fu_60 <= ap_const_lv5_A;
            elsif (((tmp_3_fu_176_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                i_fu_60 <= add_ln319_fu_200_p2;
            end if; 
        end if;
    end process;

    idx_a_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                idx_a_fu_64 <= ap_const_lv32_A;
            elsif (((ap_const_lv1_1 = and_ln321_1_fu_287_p2) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                idx_a_fu_64 <= idx_a_1_fu_303_p2;
            end if; 
        end if;
    end process;

    idx_b_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                idx_b_fu_68 <= ap_const_lv32_A;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_0 = and_ln321_1_fu_287_p2))) then 
                idx_b_fu_68 <= idx_b_1_fu_293_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                and_ln321_1_reg_392 <= and_ln321_1_fu_287_p2;
                i_2_reg_339 <= i_fu_60;
                i_2_reg_339_pp0_iter1_reg <= i_2_reg_339;
                tmp_3_reg_344 <= i_fu_60(4 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_fu_176_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                idx_a_load_reg_348 <= ap_sig_allocacmp_idx_a_load;
                idx_b_load_reg_353 <= ap_sig_allocacmp_idx_b_load;
                    zext_ln321_1_reg_368(31 downto 0) <= zext_ln321_1_fu_195_p1(31 downto 0);
                    zext_ln321_reg_358(31 downto 0) <= zext_ln321_fu_190_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_3_reg_344 = ap_const_lv1_0))) then
                local_kNearstDist_partial_a_load_reg_378 <= local_kNearstDist_partial_a_q0;
                local_kNearstDist_partial_b_load_reg_385 <= local_kNearstDist_partial_b_q0;
            end if;
        end if;
    end process;
    zext_ln321_reg_358(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln321_1_reg_368(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter1_stage0, ap_idle_pp0_0to0, ap_idle_pp0_1to2, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln319_fu_200_p2 <= std_logic_vector(unsigned(i_fu_60) + unsigned(ap_const_lv5_1F));
    and_ln321_1_fu_287_p2 <= (grp_fu_152_p2 and and_ln321_fu_281_p2);
    and_ln321_fu_281_p2 <= (or_ln321_fu_257_p2 and or_ln321_1_fu_275_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_162_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
                ap_condition_162 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, tmp_3_fu_176_p3)
    begin
        if (((tmp_3_fu_176_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_3_reg_344, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_3_reg_344 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_idx_a_load_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, and_ln321_1_fu_287_p2, ap_block_pp0_stage1, idx_a_fu_64, idx_a_1_fu_303_p2)
    begin
        if (((ap_const_lv1_1 = and_ln321_1_fu_287_p2) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_sig_allocacmp_idx_a_load <= idx_a_1_fu_303_p2;
        else 
            ap_sig_allocacmp_idx_a_load <= idx_a_fu_64;
        end if; 
    end process;


    ap_sig_allocacmp_idx_b_load_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, and_ln321_1_fu_287_p2, ap_block_pp0_stage1, idx_b_fu_68, idx_b_1_fu_293_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_0 = and_ln321_1_fu_287_p2))) then 
            ap_sig_allocacmp_idx_b_load <= idx_b_1_fu_293_p2;
        else 
            ap_sig_allocacmp_idx_b_load <= idx_b_fu_68;
        end if; 
    end process;

    bitcast_ln321_1_fu_228_p1 <= local_kNearstDist_partial_b_load_reg_385;
    bitcast_ln321_fu_211_p1 <= local_kNearstDist_partial_a_load_reg_378;
    dist_address0 <= i_cast_fu_313_p1(4 - 1 downto 0);

    dist_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, and_ln321_1_reg_392)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = and_ln321_1_reg_392)) or ((ap_const_lv1_1 = and_ln321_1_reg_392) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            dist_ce0 <= ap_const_logic_1;
        else 
            dist_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dist_d0_assign_proc : process(local_kNearstDist_partial_a_load_reg_378, local_kNearstDist_partial_b_load_reg_385, and_ln321_1_reg_392, ap_condition_162)
    begin
        if ((ap_const_boolean_1 = ap_condition_162)) then
            if ((ap_const_lv1_1 = and_ln321_1_reg_392)) then 
                dist_d0 <= local_kNearstDist_partial_a_load_reg_378;
            elsif ((ap_const_lv1_0 = and_ln321_1_reg_392)) then 
                dist_d0 <= local_kNearstDist_partial_b_load_reg_385;
            else 
                dist_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            dist_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dist_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, and_ln321_1_reg_392)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = and_ln321_1_reg_392)) or ((ap_const_lv1_1 = and_ln321_1_reg_392) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            dist_we0 <= ap_const_logic_1;
        else 
            dist_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_cast_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_339_pp0_iter1_reg),64));
    icmp_ln321_1_fu_251_p2 <= "1" when (trunc_ln321_fu_224_p1 = ap_const_lv23_0) else "0";
    icmp_ln321_2_fu_263_p2 <= "0" when (tmp_1_fu_231_p4 = ap_const_lv8_FF) else "1";
    icmp_ln321_3_fu_269_p2 <= "1" when (trunc_ln321_1_fu_241_p1 = ap_const_lv23_0) else "0";
    icmp_ln321_fu_245_p2 <= "0" when (tmp_fu_214_p4 = ap_const_lv8_FF) else "1";
    id_address0 <= i_cast_fu_313_p1(4 - 1 downto 0);

    id_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, and_ln321_1_reg_392)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = and_ln321_1_reg_392)) or ((ap_const_lv1_1 = and_ln321_1_reg_392) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            id_ce0 <= ap_const_logic_1;
        else 
            id_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    id_d0_assign_proc : process(local_kNearstId_partial_a_q0, local_kNearstId_partial_b_q0, and_ln321_1_reg_392, ap_condition_162)
    begin
        if ((ap_const_boolean_1 = ap_condition_162)) then
            if ((ap_const_lv1_1 = and_ln321_1_reg_392)) then 
                id_d0 <= local_kNearstId_partial_a_q0;
            elsif ((ap_const_lv1_0 = and_ln321_1_reg_392)) then 
                id_d0 <= local_kNearstId_partial_b_q0;
            else 
                id_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            id_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    id_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, and_ln321_1_reg_392)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = and_ln321_1_reg_392)) or ((ap_const_lv1_1 = and_ln321_1_reg_392) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            id_we0 <= ap_const_logic_1;
        else 
            id_we0 <= ap_const_logic_0;
        end if; 
    end process;

    idx_a_1_fu_303_p2 <= std_logic_vector(unsigned(idx_a_load_reg_348) + unsigned(ap_const_lv32_FFFFFFFF));
    idx_b_1_fu_293_p2 <= std_logic_vector(unsigned(idx_b_load_reg_353) + unsigned(ap_const_lv32_FFFFFFFF));
    local_kNearstDist_partial_a_address0 <= zext_ln321_fu_190_p1(4 - 1 downto 0);

    local_kNearstDist_partial_a_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            local_kNearstDist_partial_a_ce0 <= ap_const_logic_1;
        else 
            local_kNearstDist_partial_a_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_kNearstDist_partial_b_address0 <= zext_ln321_1_fu_195_p1(4 - 1 downto 0);

    local_kNearstDist_partial_b_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            local_kNearstDist_partial_b_ce0 <= ap_const_logic_1;
        else 
            local_kNearstDist_partial_b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_kNearstId_partial_a_address0 <= zext_ln321_reg_358(4 - 1 downto 0);

    local_kNearstId_partial_a_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            local_kNearstId_partial_a_ce0 <= ap_const_logic_1;
        else 
            local_kNearstId_partial_a_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_kNearstId_partial_b_address0 <= zext_ln321_1_reg_368(4 - 1 downto 0);

    local_kNearstId_partial_b_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            local_kNearstId_partial_b_ce0 <= ap_const_logic_1;
        else 
            local_kNearstId_partial_b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln321_1_fu_275_p2 <= (icmp_ln321_3_fu_269_p2 or icmp_ln321_2_fu_263_p2);
    or_ln321_fu_257_p2 <= (icmp_ln321_fu_245_p2 or icmp_ln321_1_fu_251_p2);
    tmp_1_fu_231_p4 <= bitcast_ln321_1_fu_228_p1(30 downto 23);
    tmp_3_fu_176_p3 <= i_fu_60(4 downto 4);
    tmp_fu_214_p4 <= bitcast_ln321_fu_211_p1(30 downto 23);
    trunc_ln321_1_fu_241_p1 <= bitcast_ln321_1_fu_228_p1(23 - 1 downto 0);
    trunc_ln321_fu_224_p1 <= bitcast_ln321_fu_211_p1(23 - 1 downto 0);
    zext_ln321_1_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_idx_b_load),64));
    zext_ln321_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_idx_a_load),64));
end behav;
